
Final_Project_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002008  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002008  0000209c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080007a  0080007a  000020b6  2**0
                  ALLOC
  3 .stab         00002970  00000000  00000000  000020b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000183b  00000000  00000000  00004a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006263  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000063a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006513  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000815c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009047  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a9af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <main>
      8a:	0c 94 02 10 	jmp	0x2004	; 0x2004 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_13>:
/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/

ISR(USART_RXC_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     b70:	80 91 7a 00 	lds	r24, 0x007A
     b74:	90 91 7b 00 	lds	r25, 0x007B
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_13+0x40>
	{
		(*g_callBackPtr)();
     b7c:	e0 91 7a 00 	lds	r30, 0x007A
     b80:	f0 91 7b 00 	lds	r31, 0x007B
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <UART_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void UART_init(const UART_ConfigType * Configptr)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <UART_init+0x6>
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <UART_init+0x8>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	9c 83       	std	Y+4, r25	; 0x04
     bba:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value ;
	UCSRA = (1<<U2X); /* Double transmission speed */
     bbc:	eb e2       	ldi	r30, 0x2B	; 43
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN) | (1<<TXEN) ;	/* Transmission and receive enable */
     bc4:	ea e2       	ldi	r30, 0x2A	; 42
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	88 e1       	ldi	r24, 0x18	; 24
     bca:	80 83       	st	Z, r24
	UCSRB = (UCSRB & CLEAR_RECEIVE_METHOD_MASK ) | ( (Configptr->RECEVIE_METHOD<<7) ) ; /* To configure the UART with interrupt or polling */
     bcc:	aa e2       	ldi	r26, 0x2A	; 42
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e2       	ldi	r30, 0x2A	; 42
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	28 2f       	mov	r18, r24
     bd8:	2f 77       	andi	r18, 0x7F	; 127
     bda:	eb 81       	ldd	r30, Y+3	; 0x03
     bdc:	fc 81       	ldd	r31, Y+4	; 0x04
     bde:	80 85       	ldd	r24, Z+8	; 0x08
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	96 95       	lsr	r25
     be6:	98 2f       	mov	r25, r24
     be8:	88 27       	eor	r24, r24
     bea:	97 95       	ror	r25
     bec:	87 95       	ror	r24
     bee:	82 2b       	or	r24, r18
     bf0:	8c 93       	st	X, r24

	SET_BIT(UCSRC,URSEL); /* so we can write in UCSRC register */
     bf2:	a0 e4       	ldi	r26, 0x40	; 64
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e0 e4       	ldi	r30, 0x40	; 64
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_CHAR_SIZE_MASK ) | ( (Configptr->CHAR_SIZE)<<1) ; /* setting the number of bits in UART frame */
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e0 e4       	ldi	r30, 0x40	; 64
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	28 2f       	mov	r18, r24
     c0c:	29 7f       	andi	r18, 0xF9	; 249
     c0e:	eb 81       	ldd	r30, Y+3	; 0x03
     c10:	fc 81       	ldd	r31, Y+4	; 0x04
     c12:	86 81       	ldd	r24, Z+6	; 0x06
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	82 2b       	or	r24, r18
     c1e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_STOP_BITS_MASK) | ( (Configptr->STOP_BIT)<<3) ; /* set the number of stop bits */
     c20:	a0 e4       	ldi	r26, 0x40	; 64
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e0 e4       	ldi	r30, 0x40	; 64
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	28 2f       	mov	r18, r24
     c2c:	27 7f       	andi	r18, 0xF7	; 247
     c2e:	eb 81       	ldd	r30, Y+3	; 0x03
     c30:	fc 81       	ldd	r31, Y+4	; 0x04
     c32:	85 81       	ldd	r24, Z+5	; 0x05
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	82 2b       	or	r24, r18
     c46:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_PARITY_MASK ) | ( (Configptr->PARITY)<<4) ; /* setting the PARITY */
     c48:	a0 e4       	ldi	r26, 0x40	; 64
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e0 e4       	ldi	r30, 0x40	; 64
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	28 2f       	mov	r18, r24
     c54:	2f 7c       	andi	r18, 0xCF	; 207
     c56:	eb 81       	ldd	r30, Y+3	; 0x03
     c58:	fc 81       	ldd	r31, Y+4	; 0x04
     c5a:	87 81       	ldd	r24, Z+7	; 0x07
     c5c:	88 2f       	mov	r24, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	82 95       	swap	r24
     c62:	92 95       	swap	r25
     c64:	90 7f       	andi	r25, 0xF0	; 240
     c66:	98 27       	eor	r25, r24
     c68:	80 7f       	andi	r24, 0xF0	; 240
     c6a:	98 27       	eor	r25, r24
     c6c:	82 2b       	or	r24, r18
     c6e:	8c 93       	st	X, r24

	CLEAR_BIT(UBRRH,URSEL); /* to access UBRRH not UCSRC */
     c70:	a0 e4       	ldi	r26, 0x40	; 64
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e0 e4       	ldi	r30, 0x40	; 64
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 77       	andi	r24, 0x7F	; 127
     c7c:	8c 93       	st	X, r24
	ubrr_value = (uint16)(((F_CPU / (Configptr->BAUD_RATE * 8UL))) - 1);
     c7e:	eb 81       	ldd	r30, Y+3	; 0x03
     c80:	fc 81       	ldd	r31, Y+4	; 0x04
     c82:	80 81       	ld	r24, Z
     c84:	91 81       	ldd	r25, Z+1	; 0x01
     c86:	a2 81       	ldd	r26, Z+2	; 0x02
     c88:	b3 81       	ldd	r27, Z+3	; 0x03
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	aa 1f       	adc	r26, r26
     c90:	bb 1f       	adc	r27, r27
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	aa 1f       	adc	r26, r26
     ca0:	bb 1f       	adc	r27, r27
     ca2:	9c 01       	movw	r18, r24
     ca4:	ad 01       	movw	r20, r26
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	92 e1       	ldi	r25, 0x12	; 18
     caa:	aa e7       	ldi	r26, 0x7A	; 122
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	bc 01       	movw	r22, r24
     cb0:	cd 01       	movw	r24, r26
     cb2:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__udivmodsi4>
     cb6:	da 01       	movw	r26, r20
     cb8:	c9 01       	movw	r24, r18
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value>>8;
     cc0:	e0 e4       	ldi	r30, 0x40	; 64
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	89 2f       	mov	r24, r25
     cca:	99 27       	eor	r25, r25
     ccc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     cce:	e9 e2       	ldi	r30, 0x29	; 41
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	80 83       	st	Z, r24

	g_endStringChar = Configptr->END_SRTING;
     cd6:	eb 81       	ldd	r30, Y+3	; 0x03
     cd8:	fc 81       	ldd	r31, Y+4	; 0x04
     cda:	84 81       	ldd	r24, Z+4	; 0x04
     cdc:	80 93 7c 00 	sts	0x007C, r24
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     cfa:	eb e2       	ldi	r30, 0x2B	; 43
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	80 72       	andi	r24, 0x20	; 32
     d06:	90 70       	andi	r25, 0x00	; 0
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	b9 f3       	breq	.-18     	; 0xcfa <UART_sendByte+0xc>

	UDR = data;
     d0c:	ec e2       	ldi	r30, 0x2C	; 44
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	80 83       	st	Z, r24
}
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <UART_receiveByte>:

uint8 UART_receiveByte()
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     d24:	eb e2       	ldi	r30, 0x2B	; 43
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 23       	and	r24, r24
     d2c:	dc f7       	brge	.-10     	; 0xd24 <UART_receiveByte+0x8>

	return UDR;
     d2e:	ec e2       	ldi	r30, 0x2C	; 44
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
}
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <UART_sendString+0x6>
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	9b 83       	std	Y+3, r25	; 0x03
     d48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	0e c0       	rjmp	.+28     	; 0xd6a <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	9b 81       	ldd	r25, Y+3	; 0x03
     d58:	fc 01       	movw	r30, r24
     d5a:	e2 0f       	add	r30, r18
     d5c:	f3 1f       	adc	r31, r19
     d5e:	80 81       	ld	r24, Z
     d60:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
}

void UART_sendString(const uint8 *Str)
{
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	8f 5f       	subi	r24, 0xFF	; 255
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	9b 81       	ldd	r25, Y+3	; 0x03
     d74:	fc 01       	movw	r30, r24
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	80 81       	ld	r24, Z
     d7c:	88 23       	and	r24, r24
     d7e:	39 f7       	brne	.-50     	; 0xd4e <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
	}
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	00 d0       	rcall	.+0      	; 0xd96 <UART_receiveString+0xa>
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	9b 83       	std	Y+3, r25	; 0x03
     d9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     da0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	8c 01       	movw	r16, r24
     dae:	02 0f       	add	r16, r18
     db0:	13 1f       	adc	r17, r19
     db2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
     db6:	f8 01       	movw	r30, r16
     db8:	80 83       	st	Z, r24
     dba:	0f c0       	rjmp	.+30     	; 0xdda <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
	{
		i++;
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	8f 5f       	subi	r24, 0xFF	; 255
     dc0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	8c 01       	movw	r16, r24
     dce:	02 0f       	add	r16, r18
     dd0:	13 1f       	adc	r17, r19
     dd2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
     dd6:	f8 01       	movw	r30, r16
     dd8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	9b 81       	ldd	r25, Y+3	; 0x03
     de4:	fc 01       	movw	r30, r24
     de6:	e2 0f       	add	r30, r18
     de8:	f3 1f       	adc	r31, r19
     dea:	90 81       	ld	r25, Z
     dec:	80 91 7c 00 	lds	r24, 0x007C
     df0:	98 17       	cp	r25, r24
     df2:	21 f7       	brne	.-56     	; 0xdbc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	9b 81       	ldd	r25, Y+3	; 0x03
     dfe:	fc 01       	movw	r30, r24
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	10 82       	st	Z, r1

}
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	08 95       	ret

00000e16 <UART_setCallBack>:

void UART_setCallBack( void(*a_ptr)(void) )
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <UART_setCallBack+0x6>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	90 93 7b 00 	sts	0x007B, r25
     e2c:	80 93 7a 00 	sts	0x007A, r24
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <TWI_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	00 d0       	rcall	.+0      	; 0xe44 <TWI_init+0xa>
     e44:	0f 92       	push	r0
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	9b 83       	std	Y+3, r25	; 0x03
     e4c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 TWBR_value;
	TWCR = (1<<TWEN);
     e4e:	e6 e5       	ldi	r30, 0x56	; 86
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	84 e0       	ldi	r24, 0x04	; 4
     e54:	80 83       	st	Z, r24
	TWAR = Config_Ptr->address;
     e56:	a2 e2       	ldi	r26, 0x22	; 34
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ea 81       	ldd	r30, Y+2	; 0x02
     e5c:	fb 81       	ldd	r31, Y+3	; 0x03
     e5e:	80 81       	ld	r24, Z
     e60:	8c 93       	st	X, r24
	TWSR = 0x00; /* assuming it is equal to 0 always and get TWBR based on that assumption */
     e62:	e1 e2       	ldi	r30, 0x21	; 33
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	10 82       	st	Z, r1
	TWBR = (uint8)(((F_CPU/((Config_Ptr->bit_rate)*1000))-16) /2);
     e68:	00 e2       	ldi	r16, 0x20	; 32
     e6a:	10 e0       	ldi	r17, 0x00	; 0
     e6c:	ea 81       	ldd	r30, Y+2	; 0x02
     e6e:	fb 81       	ldd	r31, Y+3	; 0x03
     e70:	21 81       	ldd	r18, Z+1	; 0x01
     e72:	32 81       	ldd	r19, Z+2	; 0x02
     e74:	88 ee       	ldi	r24, 0xE8	; 232
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	ac 01       	movw	r20, r24
     e7a:	24 9f       	mul	r18, r20
     e7c:	c0 01       	movw	r24, r0
     e7e:	25 9f       	mul	r18, r21
     e80:	90 0d       	add	r25, r0
     e82:	34 9f       	mul	r19, r20
     e84:	90 0d       	add	r25, r0
     e86:	11 24       	eor	r1, r1
     e88:	9c 01       	movw	r18, r24
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	92 e1       	ldi	r25, 0x12	; 18
     e92:	aa e7       	ldi	r26, 0x7A	; 122
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__udivmodsi4>
     e9e:	da 01       	movw	r26, r20
     ea0:	c9 01       	movw	r24, r18
     ea2:	40 97       	sbiw	r24, 0x10	; 16
     ea4:	a1 09       	sbc	r26, r1
     ea6:	b1 09       	sbc	r27, r1
     ea8:	b6 95       	lsr	r27
     eaa:	a7 95       	ror	r26
     eac:	97 95       	ror	r25
     eae:	87 95       	ror	r24
     eb0:	f8 01       	movw	r30, r16
     eb2:	80 83       	st	Z, r24

}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	08 95       	ret

00000ec4 <TWI_start>:

void TWI_start()
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN)| (1<<TWINT) | (1<<TWSTA) ;
     ecc:	e6 e5       	ldi	r30, 0x56	; 86
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	84 ea       	ldi	r24, 0xA4	; 164
     ed2:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(TWCR,TWINT) ){}
     ed4:	e6 e5       	ldi	r30, 0x56	; 86
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	dc f7       	brge	.-10     	; 0xed4 <TWI_start+0x10>

}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <TWI_stop>:

void TWI_stop()
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN)| (1<<TWINT) | (1<<TWSTO) ;
     eec:	e6 e5       	ldi	r30, 0x56	; 86
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	84 e9       	ldi	r24, 0x94	; 148
     ef2:	80 83       	st	Z, r24
}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <TWI_writeByte>:

void TWI_writeByte(uint8 byte)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte;
     f06:	e3 e2       	ldi	r30, 0x23	; 35
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	80 83       	st	Z, r24

	TWCR = (1<<TWEN)| (1<<TWINT) ;
     f0e:	e6 e5       	ldi	r30, 0x56	; 86
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	84 e8       	ldi	r24, 0x84	; 132
     f14:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(TWCR,TWINT) ){}
     f16:	e6 e5       	ldi	r30, 0x56	; 86
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	dc f7       	brge	.-10     	; 0xf16 <TWI_writeByte+0x1c>
}
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN)| (1<<TWINT) | (1<<TWEA) ;
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	84 ec       	ldi	r24, 0xC4	; 196
     f36:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(TWCR,TWINT) ){}
     f38:	e6 e5       	ldi	r30, 0x56	; 86
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	dc f7       	brge	.-10     	; 0xf38 <TWI_readByteWithACK+0x10>
	return TWDR;
     f42:	e3 e2       	ldi	r30, 0x23	; 35
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN)| (1<<TWINT) ;
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	84 e8       	ldi	r24, 0x84	; 132
     f5c:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(TWCR,TWINT) ){}
     f5e:	e6 e5       	ldi	r30, 0x56	; 86
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 23       	and	r24, r24
     f66:	dc f7       	brge	.-10     	; 0xf5e <TWI_readByteWithNACK+0x10>
	return TWDR;
     f68:	e3 e2       	ldi	r30, 0x23	; 35
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
    status = TWSR & 0xF8;
     f7e:	e1 e2       	ldi	r30, 0x21	; 33
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	88 7f       	andi	r24, 0xF8	; 248
     f86:	89 83       	std	Y+1, r24	; 0x01
	return status;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <__vector_7>:

/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     fbc:	80 91 7d 00 	lds	r24, 0x007D
     fc0:	90 91 7e 00 	lds	r25, 0x007E
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	29 f0       	breq	.+10     	; 0xfd2 <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
     fc8:	e0 91 7d 00 	lds	r30, 0x007D
     fcc:	f0 91 7e 00 	lds	r31, 0x007E
     fd0:	09 95       	icall
	}
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1022:	80 91 7f 00 	lds	r24, 0x007F
    1026:	90 91 80 00 	lds	r25, 0x0080
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	29 f0       	breq	.+10     	; 0x1038 <__vector_9+0x40>
	{
		(*g_callBackPtr1)();
    102e:	e0 91 7d 00 	lds	r30, 0x007D
    1032:	f0 91 7e 00 	lds	r31, 0x007E
    1036:	09 95       	icall
	}
}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	bf 91       	pop	r27
    1042:	af 91       	pop	r26
    1044:	9f 91       	pop	r25
    1046:	8f 91       	pop	r24
    1048:	7f 91       	pop	r23
    104a:	6f 91       	pop	r22
    104c:	5f 91       	pop	r21
    104e:	4f 91       	pop	r20
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <TIMER1_init>:

void TIMER1_init(Timer1_ConfigType * Config_Ptr)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <TIMER1_init+0x6>
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    106c:	ef e4       	ldi	r30, 0x4F	; 79
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8c e0       	ldi	r24, 0x0C	; 12
    1072:	80 83       	st	Z, r24
	TCCR1B = (Config_Ptr->mode << WGM12);
    1074:	ae e4       	ldi	r26, 0x4E	; 78
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e9 81       	ldd	r30, Y+1	; 0x01
    107a:	fa 81       	ldd	r31, Y+2	; 0x02
    107c:	85 81       	ldd	r24, Z+5	; 0x05
    107e:	88 0f       	add	r24, r24
    1080:	88 0f       	add	r24, r24
    1082:	88 0f       	add	r24, r24
    1084:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    1086:	ae e4       	ldi	r26, 0x4E	; 78
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	ee e4       	ldi	r30, 0x4E	; 78
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	98 2f       	mov	r25, r24
    1092:	98 7f       	andi	r25, 0xF8	; 248
    1094:	e9 81       	ldd	r30, Y+1	; 0x01
    1096:	fa 81       	ldd	r31, Y+2	; 0x02
    1098:	84 81       	ldd	r24, Z+4	; 0x04
    109a:	89 2b       	or	r24, r25
    109c:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;
    109e:	ac e4       	ldi	r26, 0x4C	; 76
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	9c 93       	st	X, r25
    10ae:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == COMPARE)
    10b0:	e9 81       	ldd	r30, Y+1	; 0x01
    10b2:	fa 81       	ldd	r31, Y+2	; 0x02
    10b4:	85 81       	ldd	r24, Z+5	; 0x05
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	51 f4       	brne	.+20     	; 0x10ce <TIMER1_init+0x70>
	{
		OCR1A = Config_Ptr->compare_value;
    10ba:	ea e4       	ldi	r30, 0x4A	; 74
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	a9 81       	ldd	r26, Y+1	; 0x01
    10c0:	ba 81       	ldd	r27, Y+2	; 0x02
    10c2:	12 96       	adiw	r26, 0x02	; 2
    10c4:	8d 91       	ld	r24, X+
    10c6:	9c 91       	ld	r25, X
    10c8:	13 97       	sbiw	r26, 0x03	; 3
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
	}
	TIMSK |= (1<<OCIE1A) ;
    10ce:	a9 e5       	ldi	r26, 0x59	; 89
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e9 e5       	ldi	r30, 0x59	; 89
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	80 61       	ori	r24, 0x10	; 16
    10da:	8c 93       	st	X, r24
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <TIMER1_deInit>:

void TIMER1_deInit()
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    10ee:	ef e4       	ldi	r30, 0x4F	; 79
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	10 82       	st	Z, r1
	TCCR1B = 0;
    10f4:	ee e4       	ldi	r30, 0x4E	; 78
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	10 82       	st	Z, r1
	TCNT1 = 0;
    10fa:	ec e4       	ldi	r30, 0x4C	; 76
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	11 82       	std	Z+1, r1	; 0x01
    1100:	10 82       	st	Z, r1
	OCR1A = 0;
    1102:	ea e4       	ldi	r30, 0x4A	; 74
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	11 82       	std	Z+1, r1	; 0x01
    1108:	10 82       	st	Z, r1
}
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <TIMER1_COMP_setCallBack>:

void TIMER1_COMP_setCallBack( void(*a_ptr)(void) )
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <TIMER1_COMP_setCallBack+0x6>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	90 93 7e 00 	sts	0x007E, r25
    1126:	80 93 7d 00 	sts	0x007D, r24
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <TIMER1_OVF_setCallBack>:

void TIMER1_OVF_setCallBack( void(*a_ptr)(void) )
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <TIMER1_OVF_setCallBack+0x6>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	90 93 80 00 	sts	0x0080, r25
    114a:	80 93 7f 00 	sts	0x007F, r24
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <PWM_Timer0_Start>:
#include "pwm0.h"
#include "avr/io.h"
#include "../GPIO/gpio.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	0f 92       	push	r0
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the timer with
	 * Non inverting fast PWM Mode
	 * Clock frequency = F_CPU/8
	 */
	TCNT0 = 0;
    1164:	e2 e5       	ldi	r30, 0x52	; 82
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	10 82       	st	Z, r1
	OCR0 = (uint8)((uint16)(duty_cycle*255)/100) ; /* casting the value so we don't get overflow */
    116a:	ec e5       	ldi	r30, 0x5C	; 92
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	48 2f       	mov	r20, r24
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	ca 01       	movw	r24, r20
    1176:	9c 01       	movw	r18, r24
    1178:	22 0f       	add	r18, r18
    117a:	33 1f       	adc	r19, r19
    117c:	c9 01       	movw	r24, r18
    117e:	96 95       	lsr	r25
    1180:	98 2f       	mov	r25, r24
    1182:	88 27       	eor	r24, r24
    1184:	97 95       	ror	r25
    1186:	87 95       	ror	r24
    1188:	82 1b       	sub	r24, r18
    118a:	93 0b       	sbc	r25, r19
    118c:	84 0f       	add	r24, r20
    118e:	95 1f       	adc	r25, r21
    1190:	24 e6       	ldi	r18, 0x64	; 100
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	b9 01       	movw	r22, r18
    1196:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__udivmodhi4>
    119a:	cb 01       	movw	r24, r22
    119c:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT); /* PWM pin as O/P */
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	63 e0       	ldi	r22, 0x03	; 3
    11a2:	41 e0       	ldi	r20, 0x01	; 1
    11a4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
    11a8:	e3 e5       	ldi	r30, 0x53	; 83
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8a e6       	ldi	r24, 0x6A	; 106
    11ae:	80 83       	st	Z, r24

}
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <GPIO_setupPinDirection+0x6>
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <GPIO_setupPinDirection+0x8>
    11c0:	0f 92       	push	r0
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	6a 83       	std	Y+2, r22	; 0x02
    11ca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	88 30       	cpi	r24, 0x08	; 8
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <GPIO_setupPinDirection+0x1c>
    11d2:	d5 c0       	rjmp	.+426    	; 0x137e <GPIO_setupPinDirection+0x1c6>
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	84 30       	cpi	r24, 0x04	; 4
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <GPIO_setupPinDirection+0x24>
    11da:	d1 c0       	rjmp	.+418    	; 0x137e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	3d 83       	std	Y+5, r19	; 0x05
    11e4:	2c 83       	std	Y+4, r18	; 0x04
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 05       	cpc	r25, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <GPIO_setupPinDirection+0x3a>
    11f0:	43 c0       	rjmp	.+134    	; 0x1278 <GPIO_setupPinDirection+0xc0>
    11f2:	2c 81       	ldd	r18, Y+4	; 0x04
    11f4:	3d 81       	ldd	r19, Y+5	; 0x05
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	2c f4       	brge	.+10     	; 0x1206 <GPIO_setupPinDirection+0x4e>
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	71 f0       	breq	.+28     	; 0x1220 <GPIO_setupPinDirection+0x68>
    1204:	bc c0       	rjmp	.+376    	; 0x137e <GPIO_setupPinDirection+0x1c6>
    1206:	2c 81       	ldd	r18, Y+4	; 0x04
    1208:	3d 81       	ldd	r19, Y+5	; 0x05
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <GPIO_setupPinDirection+0x5a>
    1210:	5f c0       	rjmp	.+190    	; 0x12d0 <GPIO_setupPinDirection+0x118>
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	91 05       	cpc	r25, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <GPIO_setupPinDirection+0x66>
    121c:	85 c0       	rjmp	.+266    	; 0x1328 <GPIO_setupPinDirection+0x170>
    121e:	af c0       	rjmp	.+350    	; 0x137e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	a1 f4       	brne	.+40     	; 0x124e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1226:	aa e3       	ldi	r26, 0x3A	; 58
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ea e3       	ldi	r30, 0x3A	; 58
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_setupPinDirection+0x8c>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_setupPinDirection+0x88>
    1248:	84 2b       	or	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	98 c0       	rjmp	.+304    	; 0x137e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    124e:	aa e3       	ldi	r26, 0x3A	; 58
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ea e3       	ldi	r30, 0x3A	; 58
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_setupPinDirection+0xb4>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_setupPinDirection+0xb0>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	83 c0       	rjmp	.+262    	; 0x137e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	a1 f4       	brne	.+40     	; 0x12a6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    127e:	a7 e3       	ldi	r26, 0x37	; 55
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e7 e3       	ldi	r30, 0x37	; 55
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <GPIO_setupPinDirection+0xe4>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <GPIO_setupPinDirection+0xe0>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	6c c0       	rjmp	.+216    	; 0x137e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12a6:	a7 e3       	ldi	r26, 0x37	; 55
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e7 e3       	ldi	r30, 0x37	; 55
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <GPIO_setupPinDirection+0x10c>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <GPIO_setupPinDirection+0x108>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	57 c0       	rjmp	.+174    	; 0x137e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a1 f4       	brne	.+40     	; 0x12fe <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12d6:	a4 e3       	ldi	r26, 0x34	; 52
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e4 e3       	ldi	r30, 0x34	; 52
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_setupPinDirection+0x13c>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_setupPinDirection+0x138>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	40 c0       	rjmp	.+128    	; 0x137e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12fe:	a4 e3       	ldi	r26, 0x34	; 52
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e4 e3       	ldi	r30, 0x34	; 52
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_setupPinDirection+0x164>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_setupPinDirection+0x160>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	2b c0       	rjmp	.+86     	; 0x137e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	a1 f4       	brne	.+40     	; 0x1356 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    132e:	a1 e3       	ldi	r26, 0x31	; 49
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e1 e3       	ldi	r30, 0x31	; 49
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <GPIO_setupPinDirection+0x194>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <GPIO_setupPinDirection+0x190>
    1350:	84 2b       	or	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	14 c0       	rjmp	.+40     	; 0x137e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1356:	a1 e3       	ldi	r26, 0x31	; 49
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e1 e3       	ldi	r30, 0x31	; 49
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <GPIO_setupPinDirection+0x1bc>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <GPIO_setupPinDirection+0x1b8>
    1378:	80 95       	com	r24
    137a:	84 23       	and	r24, r20
    137c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <GPIO_writePin+0x6>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <GPIO_writePin+0x8>
    1396:	0f 92       	push	r0
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	6a 83       	std	Y+2, r22	; 0x02
    13a0:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	88 30       	cpi	r24, 0x08	; 8
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <GPIO_writePin+0x1c>
    13a8:	d5 c0       	rjmp	.+426    	; 0x1554 <GPIO_writePin+0x1c6>
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <GPIO_writePin+0x24>
    13b0:	d1 c0       	rjmp	.+418    	; 0x1554 <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch(port_num)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3d 83       	std	Y+5, r19	; 0x05
    13ba:	2c 83       	std	Y+4, r18	; 0x04
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <GPIO_writePin+0x3a>
    13c6:	43 c0       	rjmp	.+134    	; 0x144e <GPIO_writePin+0xc0>
    13c8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ca:	3d 81       	ldd	r19, Y+5	; 0x05
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f4       	brge	.+10     	; 0x13dc <GPIO_writePin+0x4e>
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	71 f0       	breq	.+28     	; 0x13f6 <GPIO_writePin+0x68>
    13da:	bc c0       	rjmp	.+376    	; 0x1554 <GPIO_writePin+0x1c6>
    13dc:	2c 81       	ldd	r18, Y+4	; 0x04
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <GPIO_writePin+0x5a>
    13e6:	5f c0       	rjmp	.+190    	; 0x14a6 <GPIO_writePin+0x118>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	91 05       	cpc	r25, r1
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <GPIO_writePin+0x66>
    13f2:	85 c0       	rjmp	.+266    	; 0x14fe <GPIO_writePin+0x170>
    13f4:	af c0       	rjmp	.+350    	; 0x1554 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	a1 f4       	brne	.+40     	; 0x1424 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13fc:	ab e3       	ldi	r26, 0x3B	; 59
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	eb e3       	ldi	r30, 0x3B	; 59
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <GPIO_writePin+0x8c>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <GPIO_writePin+0x88>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	98 c0       	rjmp	.+304    	; 0x1554 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1424:	ab e3       	ldi	r26, 0x3B	; 59
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <GPIO_writePin+0xb4>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <GPIO_writePin+0xb0>
    1446:	80 95       	com	r24
    1448:	84 23       	and	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	83 c0       	rjmp	.+262    	; 0x1554 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	a1 f4       	brne	.+40     	; 0x147c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1454:	a8 e3       	ldi	r26, 0x38	; 56
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e8 e3       	ldi	r30, 0x38	; 56
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <GPIO_writePin+0xe4>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <GPIO_writePin+0xe0>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	6c c0       	rjmp	.+216    	; 0x1554 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    147c:	a8 e3       	ldi	r26, 0x38	; 56
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e8 e3       	ldi	r30, 0x38	; 56
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <GPIO_writePin+0x10c>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <GPIO_writePin+0x108>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	57 c0       	rjmp	.+174    	; 0x1554 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	a1 f4       	brne	.+40     	; 0x14d4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14ac:	a5 e3       	ldi	r26, 0x35	; 53
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e3       	ldi	r30, 0x35	; 53
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_writePin+0x13c>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_writePin+0x138>
    14ce:	84 2b       	or	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	40 c0       	rjmp	.+128    	; 0x1554 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14d4:	a5 e3       	ldi	r26, 0x35	; 53
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e3       	ldi	r30, 0x35	; 53
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_writePin+0x164>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_writePin+0x160>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	2b c0       	rjmp	.+86     	; 0x1554 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	a1 f4       	brne	.+40     	; 0x152c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1504:	a2 e3       	ldi	r26, 0x32	; 50
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e2 e3       	ldi	r30, 0x32	; 50
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_writePin+0x194>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_writePin+0x190>
    1526:	84 2b       	or	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    152c:	a2 e3       	ldi	r26, 0x32	; 50
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e2 e3       	ldi	r30, 0x32	; 50
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GPIO_writePin+0x1bc>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GPIO_writePin+0x1b8>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <GPIO_readPin+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <GPIO_readPin+0x8>
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	8a 83       	std	Y+2, r24	; 0x02
    1574:	6b 83       	std	Y+3, r22	; 0x03
	uint8 GPIO_outPin = LOGIC_LOW; /* the default return value */
    1576:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	08 f0       	brcs	.+2      	; 0x1580 <GPIO_readPin+0x1c>
    157e:	84 c0       	rjmp	.+264    	; 0x1688 <GPIO_readPin+0x124>
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	08 f0       	brcs	.+2      	; 0x1588 <GPIO_readPin+0x24>
    1586:	80 c0       	rjmp	.+256    	; 0x1688 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	3d 83       	std	Y+5, r19	; 0x05
    1590:	2c 83       	std	Y+4, r18	; 0x04
    1592:	4c 81       	ldd	r20, Y+4	; 0x04
    1594:	5d 81       	ldd	r21, Y+5	; 0x05
    1596:	41 30       	cpi	r20, 0x01	; 1
    1598:	51 05       	cpc	r21, r1
    159a:	79 f1       	breq	.+94     	; 0x15fa <GPIO_readPin+0x96>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	91 05       	cpc	r25, r1
    15a4:	34 f4       	brge	.+12     	; 0x15b2 <GPIO_readPin+0x4e>
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	3d 81       	ldd	r19, Y+5	; 0x05
    15aa:	21 15       	cp	r18, r1
    15ac:	31 05       	cpc	r19, r1
    15ae:	69 f0       	breq	.+26     	; 0x15ca <GPIO_readPin+0x66>
    15b0:	6b c0       	rjmp	.+214    	; 0x1688 <GPIO_readPin+0x124>
    15b2:	4c 81       	ldd	r20, Y+4	; 0x04
    15b4:	5d 81       	ldd	r21, Y+5	; 0x05
    15b6:	42 30       	cpi	r20, 0x02	; 2
    15b8:	51 05       	cpc	r21, r1
    15ba:	b9 f1       	breq	.+110    	; 0x162a <GPIO_readPin+0xc6>
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	91 05       	cpc	r25, r1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <GPIO_readPin+0x64>
    15c6:	49 c0       	rjmp	.+146    	; 0x165a <GPIO_readPin+0xf6>
    15c8:	5f c0       	rjmp	.+190    	; 0x1688 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,pin_num) )
    15ca:	e9 e3       	ldi	r30, 0x39	; 57
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a9 01       	movw	r20, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <GPIO_readPin+0x7e>
    15de:	55 95       	asr	r21
    15e0:	47 95       	ror	r20
    15e2:	8a 95       	dec	r24
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <GPIO_readPin+0x7a>
    15e6:	ca 01       	movw	r24, r20
    15e8:	81 70       	andi	r24, 0x01	; 1
    15ea:	90 70       	andi	r25, 0x00	; 0
    15ec:	88 23       	and	r24, r24
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <GPIO_readPin+0x92>
			{
				GPIO_outPin = LOGIC_HIGH;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	49 c0       	rjmp	.+146    	; 0x1688 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    15f6:	19 82       	std	Y+1, r1	; 0x01
    15f8:	47 c0       	rjmp	.+142    	; 0x1688 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
    15fa:	e6 e3       	ldi	r30, 0x36	; 54
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a9 01       	movw	r20, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_readPin+0xae>
    160e:	55 95       	asr	r21
    1610:	47 95       	ror	r20
    1612:	8a 95       	dec	r24
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_readPin+0xaa>
    1616:	ca 01       	movw	r24, r20
    1618:	81 70       	andi	r24, 0x01	; 1
    161a:	90 70       	andi	r25, 0x00	; 0
    161c:	88 23       	and	r24, r24
    161e:	19 f0       	breq	.+6      	; 0x1626 <GPIO_readPin+0xc2>
			{
				GPIO_outPin = LOGIC_HIGH;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	31 c0       	rjmp	.+98     	; 0x1688 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1626:	19 82       	std	Y+1, r1	; 0x01
    1628:	2f c0       	rjmp	.+94     	; 0x1688 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
    162a:	e3 e3       	ldi	r30, 0x33	; 51
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a9 01       	movw	r20, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <GPIO_readPin+0xde>
    163e:	55 95       	asr	r21
    1640:	47 95       	ror	r20
    1642:	8a 95       	dec	r24
    1644:	e2 f7       	brpl	.-8      	; 0x163e <GPIO_readPin+0xda>
    1646:	ca 01       	movw	r24, r20
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	90 70       	andi	r25, 0x00	; 0
    164c:	88 23       	and	r24, r24
    164e:	19 f0       	breq	.+6      	; 0x1656 <GPIO_readPin+0xf2>
			{
				GPIO_outPin = LOGIC_HIGH;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	19 c0       	rjmp	.+50     	; 0x1688 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1656:	19 82       	std	Y+1, r1	; 0x01
    1658:	17 c0       	rjmp	.+46     	; 0x1688 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
    165a:	e0 e3       	ldi	r30, 0x30	; 48
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a9 01       	movw	r20, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <GPIO_readPin+0x10e>
    166e:	55 95       	asr	r21
    1670:	47 95       	ror	r20
    1672:	8a 95       	dec	r24
    1674:	e2 f7       	brpl	.-8      	; 0x166e <GPIO_readPin+0x10a>
    1676:	ca 01       	movw	r24, r20
    1678:	81 70       	andi	r24, 0x01	; 1
    167a:	90 70       	andi	r25, 0x00	; 0
    167c:	88 23       	and	r24, r24
    167e:	19 f0       	breq	.+6      	; 0x1686 <GPIO_readPin+0x122>
			{
				GPIO_outPin = LOGIC_HIGH;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1686:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return GPIO_outPin;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <GPIO_setupPortDirection+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <GPIO_setupPortDirection+0x8>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	90 f5       	brcc	.+100    	; 0x1714 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3c 83       	std	Y+4, r19	; 0x04
    16b8:	2b 83       	std	Y+3, r18	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	d1 f0       	breq	.+52     	; 0x16f8 <GPIO_setupPortDirection+0x5e>
    16c4:	2b 81       	ldd	r18, Y+3	; 0x03
    16c6:	3c 81       	ldd	r19, Y+4	; 0x04
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <GPIO_setupPortDirection+0x3e>
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	61 f0       	breq	.+24     	; 0x16ee <GPIO_setupPortDirection+0x54>
    16d6:	1e c0       	rjmp	.+60     	; 0x1714 <GPIO_setupPortDirection+0x7a>
    16d8:	2b 81       	ldd	r18, Y+3	; 0x03
    16da:	3c 81       	ldd	r19, Y+4	; 0x04
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	81 f0       	breq	.+32     	; 0x1702 <GPIO_setupPortDirection+0x68>
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	91 05       	cpc	r25, r1
    16ea:	81 f0       	breq	.+32     	; 0x170c <GPIO_setupPortDirection+0x72>
    16ec:	13 c0       	rjmp	.+38     	; 0x1714 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16ee:	ea e3       	ldi	r30, 0x3A	; 58
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	80 83       	st	Z, r24
    16f6:	0e c0       	rjmp	.+28     	; 0x1714 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16f8:	e7 e3       	ldi	r30, 0x37	; 55
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	80 83       	st	Z, r24
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1702:	e4 e3       	ldi	r30, 0x34	; 52
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 83       	st	Z, r24
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    170c:	e1 e3       	ldi	r30, 0x31	; 49
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
			break;
		}
	}
}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <GPIO_writePort+0x6>
    1728:	00 d0       	rcall	.+0      	; 0x172a <GPIO_writePort+0x8>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS) )
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	90 f5       	brcc	.+100    	; 0x179c <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3c 83       	std	Y+4, r19	; 0x04
    1740:	2b 83       	std	Y+3, r18	; 0x03
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	d1 f0       	breq	.+52     	; 0x1780 <GPIO_writePort+0x5e>
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	3c 81       	ldd	r19, Y+4	; 0x04
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	2c f4       	brge	.+10     	; 0x1760 <GPIO_writePort+0x3e>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	61 f0       	breq	.+24     	; 0x1776 <GPIO_writePort+0x54>
    175e:	1e c0       	rjmp	.+60     	; 0x179c <GPIO_writePort+0x7a>
    1760:	2b 81       	ldd	r18, Y+3	; 0x03
    1762:	3c 81       	ldd	r19, Y+4	; 0x04
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	81 f0       	breq	.+32     	; 0x178a <GPIO_writePort+0x68>
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	91 05       	cpc	r25, r1
    1772:	81 f0       	breq	.+32     	; 0x1794 <GPIO_writePort+0x72>
    1774:	13 c0       	rjmp	.+38     	; 0x179c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value ;
    1776:	eb e3       	ldi	r30, 0x3B	; 59
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	80 83       	st	Z, r24
    177e:	0e c0       	rjmp	.+28     	; 0x179c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value ;
    1780:	e8 e3       	ldi	r30, 0x38	; 56
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	80 83       	st	Z, r24
    1788:	09 c0       	rjmp	.+18     	; 0x179c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value ;
    178a:	e5 e3       	ldi	r30, 0x35	; 53
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	80 83       	st	Z, r24
    1792:	04 c0       	rjmp	.+8      	; 0x179c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value ;
    1794:	e2 e3       	ldi	r30, 0x32	; 50
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	80 83       	st	Z, r24
			break;
		}
	}
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <GPIO_readPort+0x6>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <GPIO_readPort+0x8>
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 GPIO_outPort = 0x00 ; /* the default return value */
    17b8:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	84 30       	cpi	r24, 0x04	; 4
    17be:	90 f5       	brcc	.+100    	; 0x1824 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3c 83       	std	Y+4, r19	; 0x04
    17c8:	2b 83       	std	Y+3, r18	; 0x03
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	91 05       	cpc	r25, r1
    17d2:	d1 f0       	breq	.+52     	; 0x1808 <GPIO_readPort+0x5e>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	2c f4       	brge	.+10     	; 0x17e8 <GPIO_readPort+0x3e>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	61 f0       	breq	.+24     	; 0x17fe <GPIO_readPort+0x54>
    17e6:	1e c0       	rjmp	.+60     	; 0x1824 <GPIO_readPort+0x7a>
    17e8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ea:	3c 81       	ldd	r19, Y+4	; 0x04
    17ec:	22 30       	cpi	r18, 0x02	; 2
    17ee:	31 05       	cpc	r19, r1
    17f0:	81 f0       	breq	.+32     	; 0x1812 <GPIO_readPort+0x68>
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	91 05       	cpc	r25, r1
    17fa:	81 f0       	breq	.+32     	; 0x181c <GPIO_readPort+0x72>
    17fc:	13 c0       	rjmp	.+38     	; 0x1824 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			GPIO_outPort = PINA;
    17fe:	e9 e3       	ldi	r30, 0x39	; 57
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	0e c0       	rjmp	.+28     	; 0x1824 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			GPIO_outPort = PINB;
    1808:	e6 e3       	ldi	r30, 0x36	; 54
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	09 c0       	rjmp	.+18     	; 0x1824 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			GPIO_outPort = PINC;
    1812:	e3 e3       	ldi	r30, 0x33	; 51
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			GPIO_outPort = PIND;
    181c:	e0 e3       	ldi	r30, 0x30	; 48
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return GPIO_outPort;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <DcMotor_Init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/PWM0/pwm0.h"


void DcMotor_Init(void)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	/* setting the direction of the motor pins */
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, PIN_OUTPUT); /* Input1 */
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, PIN_OUTPUT); /* Inupt2 */
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	61 e0       	ldi	r22, 0x01	; 1
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <GPIO_setupPinDirection>

	/* Stop the motor */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePin>
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	00 d0       	rcall	.+0      	; 0x1870 <DcMotor_Rotate+0x6>
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	6a 83       	std	Y+2, r22	; 0x02
	/* clearing the motor so we can change it state */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePin>

	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, GET_BIT(state,0));
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	98 2f       	mov	r25, r24
    1890:	91 70       	andi	r25, 0x01	; 1
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	49 2f       	mov	r20, r25
    1898:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, GET_BIT(state,1));
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	86 95       	lsr	r24
    18a0:	98 2f       	mov	r25, r24
    18a2:	91 70       	andi	r25, 0x01	; 1
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	49 2f       	mov	r20, r25
    18aa:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePin>

	PWM_Timer0_Start(speed);
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	0e 94 ac 08 	call	0x1158	; 0x1158 <PWM_Timer0_Start>
}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <EEPROM_writeByte>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

uint8 EEPROM_writeByte(uint16 address,uint8 byte)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	62 97       	sbiw	r28, 0x12	; 18
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	98 8b       	std	Y+16, r25	; 0x10
    18d4:	8f 87       	std	Y+15, r24	; 0x0f
    18d6:	69 8b       	std	Y+17, r22	; 0x11
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a0 e2       	ldi	r26, 0x20	; 32
    18de:	b1 e4       	ldi	r27, 0x41	; 65
    18e0:	8b 87       	std	Y+11, r24	; 0x0b
    18e2:	9c 87       	std	Y+12, r25	; 0x0c
    18e4:	ad 87       	std	Y+13, r26	; 0x0d
    18e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a ef       	ldi	r20, 0xFA	; 250
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	8f 83       	std	Y+7, r24	; 0x07
    1902:	98 87       	std	Y+8, r25	; 0x08
    1904:	a9 87       	std	Y+9, r26	; 0x09
    1906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1908:	6f 81       	ldd	r22, Y+7	; 0x07
    190a:	78 85       	ldd	r23, Y+8	; 0x08
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	2c f4       	brge	.+10     	; 0x192a <EEPROM_writeByte+0x6c>
		__ticks = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9e 83       	std	Y+6, r25	; 0x06
    1926:	8d 83       	std	Y+5, r24	; 0x05
    1928:	3f c0       	rjmp	.+126    	; 0x19a8 <EEPROM_writeByte+0xea>
	else if (__tmp > 65535)
    192a:	6f 81       	ldd	r22, Y+7	; 0x07
    192c:	78 85       	ldd	r23, Y+8	; 0x08
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	57 e4       	ldi	r21, 0x47	; 71
    193a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    193e:	18 16       	cp	r1, r24
    1940:	4c f5       	brge	.+82     	; 0x1994 <EEPROM_writeByte+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1942:	6b 85       	ldd	r22, Y+11	; 0x0b
    1944:	7c 85       	ldd	r23, Y+12	; 0x0c
    1946:	8d 85       	ldd	r24, Y+13	; 0x0d
    1948:	9e 85       	ldd	r25, Y+14	; 0x0e
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
    196a:	0f c0       	rjmp	.+30     	; 0x198a <EEPROM_writeByte+0xcc>
    196c:	88 ec       	ldi	r24, 0xC8	; 200
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9c 83       	std	Y+4, r25	; 0x04
    1972:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <EEPROM_writeByte+0xba>
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
    1982:	9e 81       	ldd	r25, Y+6	; 0x06
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	69 f7       	brne	.-38     	; 0x196c <EEPROM_writeByte+0xae>
    1992:	14 c0       	rjmp	.+40     	; 0x19bc <EEPROM_writeByte+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <EEPROM_writeByte+0xf6>
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	TWI_start();
    19bc:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    19c0:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    19c4:	88 30       	cpi	r24, 0x08	; 8
    19c6:	11 f0       	breq	.+4      	; 0x19cc <EEPROM_writeByte+0x10e>
		return ERROR;
    19c8:	1a 8a       	std	Y+18, r1	; 0x12
    19ca:	28 c0       	rjmp	.+80     	; 0x1a1c <EEPROM_writeByte+0x15e>

	TWI_writeByte( (uint8)(((address&0x0700)>>7) | (0xA0)) );
    19cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ce:	98 89       	ldd	r25, Y+16	; 0x10
    19d0:	80 70       	andi	r24, 0x00	; 0
    19d2:	97 70       	andi	r25, 0x07	; 7
    19d4:	88 0f       	add	r24, r24
    19d6:	89 2f       	mov	r24, r25
    19d8:	88 1f       	adc	r24, r24
    19da:	99 0b       	sbc	r25, r25
    19dc:	91 95       	neg	r25
    19de:	80 6a       	ori	r24, 0xA0	; 160
    19e0:	0e 94 7d 07 	call	0xefa	; 0xefa <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    19e4:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    19e8:	88 31       	cpi	r24, 0x18	; 24
    19ea:	11 f0       	breq	.+4      	; 0x19f0 <EEPROM_writeByte+0x132>
		return ERROR;
    19ec:	1a 8a       	std	Y+18, r1	; 0x12
    19ee:	16 c0       	rjmp	.+44     	; 0x1a1c <EEPROM_writeByte+0x15e>

	TWI_writeByte((uint8)address);
    19f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f2:	0e 94 7d 07 	call	0xefa	; 0xefa <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    19f6:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    19fa:	88 32       	cpi	r24, 0x28	; 40
    19fc:	11 f0       	breq	.+4      	; 0x1a02 <EEPROM_writeByte+0x144>
		return ERROR;
    19fe:	1a 8a       	std	Y+18, r1	; 0x12
    1a00:	0d c0       	rjmp	.+26     	; 0x1a1c <EEPROM_writeByte+0x15e>

	TWI_writeByte(byte);
    1a02:	89 89       	ldd	r24, Y+17	; 0x11
    1a04:	0e 94 7d 07 	call	0xefa	; 0xefa <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    1a08:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    1a0c:	88 32       	cpi	r24, 0x28	; 40
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <EEPROM_writeByte+0x156>
		return ERROR;
    1a10:	1a 8a       	std	Y+18, r1	; 0x12
    1a12:	04 c0       	rjmp	.+8      	; 0x1a1c <EEPROM_writeByte+0x15e>

	TWI_stop();
    1a14:	0e 94 72 07 	call	0xee4	; 0xee4 <TWI_stop>

	return SUCCESS;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	8a 8b       	std	Y+18, r24	; 0x12
    1a1c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1a1e:	62 96       	adiw	r28, 0x12	; 18
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 address,uint8 *value)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	63 97       	sbiw	r28, 0x13	; 19
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	98 8b       	std	Y+16, r25	; 0x10
    1a46:	8f 87       	std	Y+15, r24	; 0x0f
    1a48:	7a 8b       	std	Y+18, r23	; 0x12
    1a4a:	69 8b       	std	Y+17, r22	; 0x11
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e2       	ldi	r26, 0x20	; 32
    1a52:	b1 e4       	ldi	r27, 0x41	; 65
    1a54:	8b 87       	std	Y+11, r24	; 0x0b
    1a56:	9c 87       	std	Y+12, r25	; 0x0c
    1a58:	ad 87       	std	Y+13, r26	; 0x0d
    1a5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a ef       	ldi	r20, 0xFA	; 250
    1a6a:	54 e4       	ldi	r21, 0x44	; 68
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8f 83       	std	Y+7, r24	; 0x07
    1a76:	98 87       	std	Y+8, r25	; 0x08
    1a78:	a9 87       	std	Y+9, r26	; 0x09
    1a7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <EEPROM_readByte+0x6e>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <EEPROM_readByte+0xec>
	else if (__tmp > 65535)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	4c f5       	brge	.+82     	; 0x1b08 <EEPROM_readByte+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <EEPROM_readByte+0xce>
    1ae0:	88 ec       	ldi	r24, 0xC8	; 200
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <EEPROM_readByte+0xbc>
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	69 f7       	brne	.-38     	; 0x1ae0 <EEPROM_readByte+0xb0>
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <EEPROM_readByte+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b08:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0a:	78 85       	ldd	r23, Y+8	; 0x08
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <EEPROM_readByte+0xf8>
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	TWI_start();
    1b30:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    1b34:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    1b38:	88 30       	cpi	r24, 0x08	; 8
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <EEPROM_readByte+0x110>
		return ERROR;
    1b3c:	1b 8a       	std	Y+19, r1	; 0x13
    1b3e:	44 c0       	rjmp	.+136    	; 0x1bc8 <EEPROM_readByte+0x198>

	TWI_writeByte( (uint8)((address&0x0700)>>7 | (0xA0)) );
    1b40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b42:	98 89       	ldd	r25, Y+16	; 0x10
    1b44:	80 70       	andi	r24, 0x00	; 0
    1b46:	97 70       	andi	r25, 0x07	; 7
    1b48:	88 0f       	add	r24, r24
    1b4a:	89 2f       	mov	r24, r25
    1b4c:	88 1f       	adc	r24, r24
    1b4e:	99 0b       	sbc	r25, r25
    1b50:	91 95       	neg	r25
    1b52:	80 6a       	ori	r24, 0xA0	; 160
    1b54:	0e 94 7d 07 	call	0xefa	; 0xefa <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b58:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    1b5c:	88 31       	cpi	r24, 0x18	; 24
    1b5e:	11 f0       	breq	.+4      	; 0x1b64 <EEPROM_readByte+0x134>
		return ERROR;
    1b60:	1b 8a       	std	Y+19, r1	; 0x13
    1b62:	32 c0       	rjmp	.+100    	; 0x1bc8 <EEPROM_readByte+0x198>

	TWI_writeByte((uint8)address);
    1b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b66:	0e 94 7d 07 	call	0xefa	; 0xefa <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    1b6a:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    1b6e:	88 32       	cpi	r24, 0x28	; 40
    1b70:	11 f0       	breq	.+4      	; 0x1b76 <EEPROM_readByte+0x146>
		return ERROR;
    1b72:	1b 8a       	std	Y+19, r1	; 0x13
    1b74:	29 c0       	rjmp	.+82     	; 0x1bc8 <EEPROM_readByte+0x198>

	TWI_start();
    1b76:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_start>
	if(TWI_getStatus() != TWI_REP_START)
    1b7a:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    1b7e:	80 31       	cpi	r24, 0x10	; 16
    1b80:	11 f0       	breq	.+4      	; 0x1b86 <EEPROM_readByte+0x156>
		return ERROR;
    1b82:	1b 8a       	std	Y+19, r1	; 0x13
    1b84:	21 c0       	rjmp	.+66     	; 0x1bc8 <EEPROM_readByte+0x198>

    TWI_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7) | 1));
    1b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b88:	98 89       	ldd	r25, Y+16	; 0x10
    1b8a:	80 70       	andi	r24, 0x00	; 0
    1b8c:	97 70       	andi	r25, 0x07	; 7
    1b8e:	88 0f       	add	r24, r24
    1b90:	89 2f       	mov	r24, r25
    1b92:	88 1f       	adc	r24, r24
    1b94:	99 0b       	sbc	r25, r25
    1b96:	91 95       	neg	r25
    1b98:	81 6a       	ori	r24, 0xA1	; 161
    1b9a:	0e 94 7d 07 	call	0xefa	; 0xefa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1b9e:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    1ba2:	80 34       	cpi	r24, 0x40	; 64
    1ba4:	11 f0       	breq	.+4      	; 0x1baa <EEPROM_readByte+0x17a>
        return ERROR;
    1ba6:	1b 8a       	std	Y+19, r1	; 0x13
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <EEPROM_readByte+0x198>

    *value = TWI_readByteWithNACK();
    1baa:	0e 94 a7 07 	call	0xf4e	; 0xf4e <TWI_readByteWithNACK>
    1bae:	e9 89       	ldd	r30, Y+17	; 0x11
    1bb0:	fa 89       	ldd	r31, Y+18	; 0x12
    1bb2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1bb4:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_getStatus>
    1bb8:	88 35       	cpi	r24, 0x58	; 88
    1bba:	11 f0       	breq	.+4      	; 0x1bc0 <EEPROM_readByte+0x190>
        return ERROR;
    1bbc:	1b 8a       	std	Y+19, r1	; 0x13
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <EEPROM_readByte+0x198>

    TWI_stop();
    1bc0:	0e 94 72 07 	call	0xee4	; 0xee4 <TWI_stop>
	return SUCCESS;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1bca:	63 96       	adiw	r28, 0x13	; 19
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <BUZZER_init>:

#include "buzzer.h"
#include "../../MCAL/GPIO/gpio.h"

void BUZZER_init(void)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <GPIO_setupPinDirection>
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <BUZZER_on>:

void BUZZER_on(void)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePin>
}
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <BUZZER_off>:

void BUZZER_off(void)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	0e 94 c7 09 	call	0x138e	; 0x138e <GPIO_writePin>
}
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <main>:

/*******************************************************************************
*           					Main Function                                 *
*******************************************************************************/
int main(void)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <main+0x6>
    1c2a:	0f 92       	push	r0
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
	/* Initialize different modules */
	TWI_init(&TWI_Configuration);
    1c30:	87 e7       	ldi	r24, 0x77	; 119
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 1d 07 	call	0xe3a	; 0xe3a <TWI_init>
	BUZZER_init();
    1c38:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <BUZZER_init>
	DcMotor_Init();
    1c3c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DcMotor_Init>
	UART_init(&UART_Configuration);
    1c40:	88 e6       	ldi	r24, 0x68	; 104
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 d6 05 	call	0xbac	; 0xbac <UART_init>
	sei();
    1c48:	78 94       	sei
	/* waiting MCU1 to be ready */
	while( UART_receiveByte() != MC_Ready){}
    1c4a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
    1c4e:	8c 3f       	cpi	r24, 0xFC	; 252
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <main+0x26>
	/* To check if password is set in the EEPROM or not */
	EEPROM_readByte(Password_Is_Set_Address, &PasswordState);
    1c52:	25 e8       	ldi	r18, 0x85	; 133
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	80 e2       	ldi	r24, 0x20	; 32
    1c58:	93 e0       	ldi	r25, 0x03	; 3
    1c5a:	b9 01       	movw	r22, r18
    1c5c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <EEPROM_readByte>
	/* send the password state to MCU1 to handle the different cases */
	UART_sendByte(PasswordState);
    1c60:	80 91 85 00 	lds	r24, 0x0085
    1c64:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>

	while(1)
	{
		/* waiting MCU1 to send the message */
		uint8 MSG = UART_receiveByte();
    1c68:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
    1c6c:	89 83       	std	Y+1, r24	; 0x01
		switch(MSG)
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3b 83       	std	Y+3, r19	; 0x03
    1c76:	2a 83       	std	Y+2, r18	; 0x02
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7c:	87 37       	cpi	r24, 0x77	; 119
    1c7e:	91 05       	cpc	r25, r1
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <main+0x60>
    1c82:	42 c0       	rjmp	.+132    	; 0x1d08 <main+0xe4>
    1c84:	2a 81       	ldd	r18, Y+2	; 0x02
    1c86:	3b 81       	ldd	r19, Y+3	; 0x03
    1c88:	28 37       	cpi	r18, 0x78	; 120
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	34 f4       	brge	.+12     	; 0x1c9a <main+0x76>
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	9b 81       	ldd	r25, Y+3	; 0x03
    1c92:	80 32       	cpi	r24, 0x20	; 32
    1c94:	91 05       	cpc	r25, r1
    1c96:	19 f1       	breq	.+70     	; 0x1cde <main+0xba>
    1c98:	e7 cf       	rjmp	.-50     	; 0x1c68 <main+0x44>
    1c9a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c9c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c9e:	28 38       	cpi	r18, 0x88	; 136
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	41 f0       	breq	.+16     	; 0x1cb4 <main+0x90>
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	89 39       	cpi	r24, 0x99	; 153
    1caa:	91 05       	cpc	r25, r1
    1cac:	e9 f6       	brne	.-70     	; 0x1c68 <main+0x44>
		{
		/* In case MCU1 wants to set the password or update it */
		case MSG_UpdatePassword:
			App_updatePassword();
    1cae:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <App_updatePassword>
    1cb2:	da cf       	rjmp	.-76     	; 0x1c68 <main+0x44>
			break;
		/* In case MCU1 wants to enter ERROR state and turn the alarm on */
		case MSG_TurnOnAlarm:
			g_ticks = 0;
    1cb4:	10 92 81 00 	sts	0x0081, r1
			g_exitAlarmFlag = 0;
    1cb8:	10 92 84 00 	sts	0x0084, r1
			/* initialize the timer module with the desired ISR */
			TIMER1_COMP_setCallBack(TIMER1_ALARM_ISR);
    1cbc:	8e e7       	ldi	r24, 0x7E	; 126
    1cbe:	9f e0       	ldi	r25, 0x0F	; 15
    1cc0:	0e 94 88 08 	call	0x1110	; 0x1110 <TIMER1_COMP_setCallBack>
			TIMER1_init(&TIMER1_Configuration);
    1cc4:	81 e7       	ldi	r24, 0x71	; 113
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 2f 08 	call	0x105e	; 0x105e <TIMER1_init>
			BUZZER_on(); /* Turn on the alarm */
    1ccc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <BUZZER_on>
			while(g_exitAlarmFlag == 0){} /* wait until the timer counts 60 seconds */
    1cd0:	80 91 84 00 	lds	r24, 0x0084
    1cd4:	88 23       	and	r24, r24
    1cd6:	e1 f3       	breq	.-8      	; 0x1cd0 <main+0xac>
			BUZZER_off(); /* Turn off the alarm */
    1cd8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <BUZZER_off>
    1cdc:	c5 cf       	rjmp	.-118    	; 0x1c68 <main+0x44>
			break;
		/* In case MCU1 wants to enter open the door */
		case MSG_Motor:
			g_ticks = 0;
    1cde:	10 92 81 00 	sts	0x0081, r1
			/* initialize the timer module with the desired ISR */
			TIMER1_COMP_setCallBack(TIMER1_MOTOR_15SEC_ISR);
    1ce2:	8d e2       	ldi	r24, 0x2D	; 45
    1ce4:	9f e0       	ldi	r25, 0x0F	; 15
    1ce6:	0e 94 88 08 	call	0x1110	; 0x1110 <TIMER1_COMP_setCallBack>
			TIMER1_init(&TIMER1_Configuration);
    1cea:	81 e7       	ldi	r24, 0x71	; 113
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 2f 08 	call	0x105e	; 0x105e <TIMER1_init>
			DcMotor_Rotate(	DcMotor_CW, 100); /* opening the door */
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	64 e6       	ldi	r22, 0x64	; 100
    1cf6:	0e 94 35 0c 	call	0x186a	; 0x186a <DcMotor_Rotate>
			g_exitMotorFlag = 0;
    1cfa:	10 92 82 00 	sts	0x0082, r1
			while(g_exitMotorFlag == 0){}
    1cfe:	80 91 82 00 	lds	r24, 0x0082
    1d02:	88 23       	and	r24, r24
    1d04:	e1 f3       	breq	.-8      	; 0x1cfe <main+0xda>
    1d06:	b0 cf       	rjmp	.-160    	; 0x1c68 <main+0x44>
			break;
		/* In case MCU1 wants to know the password saved in EEPROM */
		case MSG_checkPassword:
			App_checkPassword();
    1d08:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <App_checkPassword>
    1d0c:	ad cf       	rjmp	.-166    	; 0x1c68 <main+0x44>

00001d0e <App_readPassword>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void App_readPassword()
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
	for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++ )
    1d18:	19 82       	std	Y+1, r1	; 0x01
    1d1a:	13 c0       	rjmp	.+38     	; 0x1d42 <App_readPassword+0x34>
	{
		EEPROM_readByte(Password_Address+i, (Password+i) );
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	88 2f       	mov	r24, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	80 5b       	subi	r24, 0xB0	; 176
    1d24:	9c 4f       	sbci	r25, 0xFC	; 252
    1d26:	ac 01       	movw	r20, r24
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 01       	movw	r18, r24
    1d30:	26 56       	subi	r18, 0x66	; 102
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	ca 01       	movw	r24, r20
    1d36:	b9 01       	movw	r22, r18
    1d38:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <EEPROM_readByte>
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void App_readPassword()
{
	for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++ )
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	8f 5f       	subi	r24, 0xFF	; 255
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	85 30       	cpi	r24, 0x05	; 5
    1d46:	50 f3       	brcs	.-44     	; 0x1d1c <App_readPassword+0xe>
	{
		EEPROM_readByte(Password_Address+i, (Password+i) );
	}
}
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <App_updatePassword>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void App_updatePassword()
{
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	0f 92       	push	r0
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
	for(uint8 k = 0 ; k < PASSWORD_SIZE ; k++)
    1d5e:	19 82       	std	Y+1, r1	; 0x01
    1d60:	1d c0       	rjmp	.+58     	; 0x1d9c <App_updatePassword+0x4c>
	{
		Password[k] = UART_receiveByte(); /* Getting the new password from MCU1 */
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	08 2f       	mov	r16, r24
    1d66:	10 e0       	ldi	r17, 0x00	; 0
    1d68:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	e6 56       	subi	r30, 0x66	; 102
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 83       	st	Z, r24
		EEPROM_writeByte(Password_Address+k, Password[k]); /* Write it in the EEPROM */
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	80 5b       	subi	r24, 0xB0	; 176
    1d7c:	9c 4f       	sbci	r25, 0xFC	; 252
    1d7e:	ac 01       	movw	r20, r24
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	fc 01       	movw	r30, r24
    1d88:	e6 56       	subi	r30, 0x66	; 102
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	20 81       	ld	r18, Z
    1d8e:	ca 01       	movw	r24, r20
    1d90:	62 2f       	mov	r22, r18
    1d92:	0e 94 5f 0c 	call	0x18be	; 0x18be <EEPROM_writeByte>
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void App_updatePassword()
{
	for(uint8 k = 0 ; k < PASSWORD_SIZE ; k++)
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	85 30       	cpi	r24, 0x05	; 5
    1da0:	00 f3       	brcs	.-64     	; 0x1d62 <App_updatePassword+0x12>
	{
		Password[k] = UART_receiveByte(); /* Getting the new password from MCU1 */
		EEPROM_writeByte(Password_Address+k, Password[k]); /* Write it in the EEPROM */
	}
	EEPROM_writeByte(Password_Is_Set_Address, PasswordSET); /* Update password state to be set*/
    1da2:	80 e2       	ldi	r24, 0x20	; 32
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	62 ec       	ldi	r22, 0xC2	; 194
    1da8:	0e 94 5f 0c 	call	0x18be	; 0x18be <EEPROM_writeByte>
}
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	08 95       	ret

00001db8 <App_checkPassword>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void App_checkPassword()
{
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	27 97       	sbiw	r28, 0x07	; 7
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
	uint8 checkPassword[PASSWORD_SIZE]; /* Variable to save the password from the keypad in MCU1 */
	App_readPassword(); /* Update the Password variable to be = to the password in the EEPROM */
    1dd0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <App_readPassword>
	for(uint8 k = 0 ; k < PASSWORD_SIZE ; k++) /* Receiving the password from MCU1 */
    1dd4:	1a 82       	std	Y+2, r1	; 0x02
    1dd6:	12 c0       	rjmp	.+36     	; 0x1dfc <App_checkPassword+0x44>
	{
		checkPassword[k] = UART_receiveByte();
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	08 2f       	mov	r16, r24
    1ddc:	10 e0       	ldi	r17, 0x00	; 0
    1dde:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
    1de2:	28 2f       	mov	r18, r24
    1de4:	ce 01       	movw	r24, r28
    1de6:	03 96       	adiw	r24, 0x03	; 3
    1de8:	fc 01       	movw	r30, r24
    1dea:	e0 0f       	add	r30, r16
    1dec:	f1 1f       	adc	r31, r17
    1dee:	20 83       	st	Z, r18
		UART_sendByte(MC_Ready);
    1df0:	8c ef       	ldi	r24, 0xFC	; 252
    1df2:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
********************************************************************************/
void App_checkPassword()
{
	uint8 checkPassword[PASSWORD_SIZE]; /* Variable to save the password from the keypad in MCU1 */
	App_readPassword(); /* Update the Password variable to be = to the password in the EEPROM */
	for(uint8 k = 0 ; k < PASSWORD_SIZE ; k++) /* Receiving the password from MCU1 */
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	8a 83       	std	Y+2, r24	; 0x02
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	85 30       	cpi	r24, 0x05	; 5
    1e00:	58 f3       	brcs	.-42     	; 0x1dd8 <App_checkPassword+0x20>
	{
		checkPassword[k] = UART_receiveByte();
		UART_sendByte(MC_Ready);
	}
	for(uint8 j = 0 ; j < PASSWORD_SIZE ; j++) /* check if they are matched or not */
    1e02:	19 82       	std	Y+1, r1	; 0x01
    1e04:	19 c0       	rjmp	.+50     	; 0x1e38 <App_checkPassword+0x80>
	{
		if(Password[j] != checkPassword[j])
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e6 56       	subi	r30, 0x66	; 102
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	40 81       	ld	r20, Z
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	03 96       	adiw	r24, 0x03	; 3
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	80 81       	ld	r24, Z
    1e26:	48 17       	cp	r20, r24
    1e28:	21 f0       	breq	.+8      	; 0x1e32 <App_checkPassword+0x7a>
		{
			UART_sendByte(MSG_UnMatched);
    1e2a:	8f e0       	ldi	r24, 0x0F	; 15
    1e2c:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
    1e30:	09 c0       	rjmp	.+18     	; 0x1e44 <App_checkPassword+0x8c>
	for(uint8 k = 0 ; k < PASSWORD_SIZE ; k++) /* Receiving the password from MCU1 */
	{
		checkPassword[k] = UART_receiveByte();
		UART_sendByte(MC_Ready);
	}
	for(uint8 j = 0 ; j < PASSWORD_SIZE ; j++) /* check if they are matched or not */
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	85 30       	cpi	r24, 0x05	; 5
    1e3c:	20 f3       	brcs	.-56     	; 0x1e06 <App_checkPassword+0x4e>
		{
			UART_sendByte(MSG_UnMatched);
			return;
		}
	}
	UART_sendByte(MSG_Matched);
    1e3e:	80 ef       	ldi	r24, 0xF0	; 240
    1e40:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
}
    1e44:	27 96       	adiw	r28, 0x07	; 7
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	08 95       	ret

00001e5a <TIMER1_MOTOR_15SEC_ISR>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void TIMER1_MOTOR_15SEC_ISR(void)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1e62:	80 91 81 00 	lds	r24, 0x0081
    1e66:	8f 5f       	subi	r24, 0xFF	; 255
    1e68:	80 93 81 00 	sts	0x0081, r24
	if(g_ticks == 15)
    1e6c:	80 91 81 00 	lds	r24, 0x0081
    1e70:	8f 30       	cpi	r24, 0x0F	; 15
    1e72:	29 f5       	brne	.+74     	; 0x1ebe <TIMER1_MOTOR_15SEC_ISR+0x64>
	{
		g_ticks = 0;
    1e74:	10 92 81 00 	sts	0x0081, r1
		if(g_MotorUnlocking == 0) /* wait until number of seconds = 15 */
    1e78:	80 91 83 00 	lds	r24, 0x0083
    1e7c:	88 23       	and	r24, r24
    1e7e:	81 f4       	brne	.+32     	; 0x1ea0 <TIMER1_MOTOR_15SEC_ISR+0x46>
		{
			/* Waiting MC1 to be Ready as LCD is slow at writing and Turning Motor On or OFF is fast so there will
			 * a delay that we can solve by waiting LCD to write then turn the motor on or off */
			UART_receiveByte();
    1e80:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
			DcMotor_Rotate(	DcMotor_STOP, 100); /* the door now is unlocked */
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	64 e6       	ldi	r22, 0x64	; 100
    1e88:	0e 94 35 0c 	call	0x186a	; 0x186a <DcMotor_Rotate>
			g_MotorUnlocking++;
    1e8c:	80 91 83 00 	lds	r24, 0x0083
    1e90:	8f 5f       	subi	r24, 0xFF	; 255
    1e92:	80 93 83 00 	sts	0x0083, r24
			TIMER1_COMP_setCallBack(TIMER1_MOTOR_3SEC_ISR); /* to wait another 3 seconds then lock it again */
    1e96:	82 e6       	ldi	r24, 0x62	; 98
    1e98:	9f e0       	ldi	r25, 0x0F	; 15
    1e9a:	0e 94 88 08 	call	0x1110	; 0x1110 <TIMER1_COMP_setCallBack>
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <TIMER1_MOTOR_15SEC_ISR+0x64>
		}
		else if(g_MotorUnlocking == 1) /* in case it is the second time to come here then we handled every case for the door and we want to exit*/
    1ea0:	80 91 83 00 	lds	r24, 0x0083
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	59 f4       	brne	.+22     	; 0x1ebe <TIMER1_MOTOR_15SEC_ISR+0x64>
		{
			g_MotorUnlocking = 0;
    1ea8:	10 92 83 00 	sts	0x0083, r1
			g_exitMotorFlag = 1; /* to exit the function */
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	80 93 82 00 	sts	0x0082, r24
			DcMotor_Rotate(	DcMotor_STOP, 100); /* Stop the motor */
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	64 e6       	ldi	r22, 0x64	; 100
    1eb6:	0e 94 35 0c 	call	0x186a	; 0x186a <DcMotor_Rotate>
			TIMER1_deInit(); /* stop the timer */
    1eba:	0e 94 73 08 	call	0x10e6	; 0x10e6 <TIMER1_deInit>
		}
	}
}
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <TIMER1_MOTOR_3SEC_ISR>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void TIMER1_MOTOR_3SEC_ISR(void)
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1ecc:	80 91 81 00 	lds	r24, 0x0081
    1ed0:	8f 5f       	subi	r24, 0xFF	; 255
    1ed2:	80 93 81 00 	sts	0x0081, r24
	if(g_ticks == 3) /* wait until number of seconds = 3 */
    1ed6:	80 91 81 00 	lds	r24, 0x0081
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	61 f4       	brne	.+24     	; 0x1ef6 <TIMER1_MOTOR_3SEC_ISR+0x32>
	{
		g_ticks = 0;
    1ede:	10 92 81 00 	sts	0x0081, r1
		/* Waiting MC1 to be Ready as LCD is slow at writing and Turning Motor On or OFF is fast so there will
		 * a delay that we can solve by waiting LCD to write then turn the motor on or off */
		UART_receiveByte();
    1ee2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
		DcMotor_Rotate(	DcMotor_CCW, 100); /* Lock the door again */
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	64 e6       	ldi	r22, 0x64	; 100
    1eea:	0e 94 35 0c 	call	0x186a	; 0x186a <DcMotor_Rotate>
		TIMER1_COMP_setCallBack(TIMER1_MOTOR_15SEC_ISR); /* to count 15 seconds then stop the motor */
    1eee:	8d e2       	ldi	r24, 0x2D	; 45
    1ef0:	9f e0       	ldi	r25, 0x0F	; 15
    1ef2:	0e 94 88 08 	call	0x1110	; 0x1110 <TIMER1_COMP_setCallBack>
	}
}
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <TIMER1_ALARM_ISR>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void TIMER1_ALARM_ISR()
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1f04:	80 91 81 00 	lds	r24, 0x0081
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	80 93 81 00 	sts	0x0081, r24
	if(g_ticks == 60)  /* wait until number of seconds = 60 */
    1f0e:	80 91 81 00 	lds	r24, 0x0081
    1f12:	8c 33       	cpi	r24, 0x3C	; 60
    1f14:	39 f4       	brne	.+14     	; 0x1f24 <TIMER1_ALARM_ISR+0x28>
	{
		g_ticks = 0;
    1f16:	10 92 81 00 	sts	0x0081, r1
		g_exitAlarmFlag = 1; /* exit ERROR state and turn off the buzzer */
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	80 93 84 00 	sts	0x0084, r24
		TIMER1_deInit(); /* stop the timer */
    1f20:	0e 94 73 08 	call	0x10e6	; 0x10e6 <TIMER1_deInit>
	}
}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <__udivmodhi4>:
    1f2a:	aa 1b       	sub	r26, r26
    1f2c:	bb 1b       	sub	r27, r27
    1f2e:	51 e1       	ldi	r21, 0x11	; 17
    1f30:	07 c0       	rjmp	.+14     	; 0x1f40 <__udivmodhi4_ep>

00001f32 <__udivmodhi4_loop>:
    1f32:	aa 1f       	adc	r26, r26
    1f34:	bb 1f       	adc	r27, r27
    1f36:	a6 17       	cp	r26, r22
    1f38:	b7 07       	cpc	r27, r23
    1f3a:	10 f0       	brcs	.+4      	; 0x1f40 <__udivmodhi4_ep>
    1f3c:	a6 1b       	sub	r26, r22
    1f3e:	b7 0b       	sbc	r27, r23

00001f40 <__udivmodhi4_ep>:
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	5a 95       	dec	r21
    1f46:	a9 f7       	brne	.-22     	; 0x1f32 <__udivmodhi4_loop>
    1f48:	80 95       	com	r24
    1f4a:	90 95       	com	r25
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	08 95       	ret

00001f52 <__udivmodsi4>:
    1f52:	a1 e2       	ldi	r26, 0x21	; 33
    1f54:	1a 2e       	mov	r1, r26
    1f56:	aa 1b       	sub	r26, r26
    1f58:	bb 1b       	sub	r27, r27
    1f5a:	fd 01       	movw	r30, r26
    1f5c:	0d c0       	rjmp	.+26     	; 0x1f78 <__udivmodsi4_ep>

00001f5e <__udivmodsi4_loop>:
    1f5e:	aa 1f       	adc	r26, r26
    1f60:	bb 1f       	adc	r27, r27
    1f62:	ee 1f       	adc	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	a2 17       	cp	r26, r18
    1f68:	b3 07       	cpc	r27, r19
    1f6a:	e4 07       	cpc	r30, r20
    1f6c:	f5 07       	cpc	r31, r21
    1f6e:	20 f0       	brcs	.+8      	; 0x1f78 <__udivmodsi4_ep>
    1f70:	a2 1b       	sub	r26, r18
    1f72:	b3 0b       	sbc	r27, r19
    1f74:	e4 0b       	sbc	r30, r20
    1f76:	f5 0b       	sbc	r31, r21

00001f78 <__udivmodsi4_ep>:
    1f78:	66 1f       	adc	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	88 1f       	adc	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	1a 94       	dec	r1
    1f82:	69 f7       	brne	.-38     	; 0x1f5e <__udivmodsi4_loop>
    1f84:	60 95       	com	r22
    1f86:	70 95       	com	r23
    1f88:	80 95       	com	r24
    1f8a:	90 95       	com	r25
    1f8c:	9b 01       	movw	r18, r22
    1f8e:	ac 01       	movw	r20, r24
    1f90:	bd 01       	movw	r22, r26
    1f92:	cf 01       	movw	r24, r30
    1f94:	08 95       	ret

00001f96 <__prologue_saves__>:
    1f96:	2f 92       	push	r2
    1f98:	3f 92       	push	r3
    1f9a:	4f 92       	push	r4
    1f9c:	5f 92       	push	r5
    1f9e:	6f 92       	push	r6
    1fa0:	7f 92       	push	r7
    1fa2:	8f 92       	push	r8
    1fa4:	9f 92       	push	r9
    1fa6:	af 92       	push	r10
    1fa8:	bf 92       	push	r11
    1faa:	cf 92       	push	r12
    1fac:	df 92       	push	r13
    1fae:	ef 92       	push	r14
    1fb0:	ff 92       	push	r15
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	ca 1b       	sub	r28, r26
    1fc0:	db 0b       	sbc	r29, r27
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	09 94       	ijmp

00001fce <__epilogue_restores__>:
    1fce:	2a 88       	ldd	r2, Y+18	; 0x12
    1fd0:	39 88       	ldd	r3, Y+17	; 0x11
    1fd2:	48 88       	ldd	r4, Y+16	; 0x10
    1fd4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fd6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fd8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fda:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fdc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fde:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fe0:	b9 84       	ldd	r11, Y+9	; 0x09
    1fe2:	c8 84       	ldd	r12, Y+8	; 0x08
    1fe4:	df 80       	ldd	r13, Y+7	; 0x07
    1fe6:	ee 80       	ldd	r14, Y+6	; 0x06
    1fe8:	fd 80       	ldd	r15, Y+5	; 0x05
    1fea:	0c 81       	ldd	r16, Y+4	; 0x04
    1fec:	1b 81       	ldd	r17, Y+3	; 0x03
    1fee:	aa 81       	ldd	r26, Y+2	; 0x02
    1ff0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ff2:	ce 0f       	add	r28, r30
    1ff4:	d1 1d       	adc	r29, r1
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	ed 01       	movw	r28, r26
    2002:	08 95       	ret

00002004 <_exit>:
    2004:	f8 94       	cli

00002006 <__stop_program>:
    2006:	ff cf       	rjmp	.-2      	; 0x2006 <__stop_program>
