
Final_Project_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  00003488  0000351c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800160  00800160  0000361c  2**0
                  ALLOC
  3 .stab         00003570  00000000  00000000  0000361c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000159a  00000000  00000000  00006b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008126  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008266  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000083d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a01f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000af0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bcb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000be18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a4 11 	call	0x2348	; 0x2348 <main>
      8a:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e4       	ldi	r26, 0x47	; 71
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e4       	ldi	r24, 0x47	; 71
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_13>:
/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/

ISR(USART_RXC_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     b70:	80 91 60 01 	lds	r24, 0x0160
     b74:	90 91 61 01 	lds	r25, 0x0161
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_13+0x40>
	{
		(*g_callBackPtr)();
     b7c:	e0 91 60 01 	lds	r30, 0x0160
     b80:	f0 91 61 01 	lds	r31, 0x0161
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <UART_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void UART_init(const UART_ConfigType * Configptr)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <UART_init+0x6>
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <UART_init+0x8>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	9c 83       	std	Y+4, r25	; 0x04
     bba:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value ;
	UCSRA = (1<<U2X); /* Double transmission speed */
     bbc:	eb e2       	ldi	r30, 0x2B	; 43
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN) | (1<<TXEN) ;	/* Transmission and receive enable */
     bc4:	ea e2       	ldi	r30, 0x2A	; 42
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	88 e1       	ldi	r24, 0x18	; 24
     bca:	80 83       	st	Z, r24
	UCSRB = (UCSRB & CLEAR_RECEIVE_METHOD_MASK ) | ( (Configptr->RECEVIE_METHOD<<7) ) ; /* To configure the UART with interrupt or polling */
     bcc:	aa e2       	ldi	r26, 0x2A	; 42
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e2       	ldi	r30, 0x2A	; 42
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	28 2f       	mov	r18, r24
     bd8:	2f 77       	andi	r18, 0x7F	; 127
     bda:	eb 81       	ldd	r30, Y+3	; 0x03
     bdc:	fc 81       	ldd	r31, Y+4	; 0x04
     bde:	80 85       	ldd	r24, Z+8	; 0x08
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	96 95       	lsr	r25
     be6:	98 2f       	mov	r25, r24
     be8:	88 27       	eor	r24, r24
     bea:	97 95       	ror	r25
     bec:	87 95       	ror	r24
     bee:	82 2b       	or	r24, r18
     bf0:	8c 93       	st	X, r24

	SET_BIT(UCSRC,URSEL); /* so we can write in UCSRC register */
     bf2:	a0 e4       	ldi	r26, 0x40	; 64
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e0 e4       	ldi	r30, 0x40	; 64
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_CHAR_SIZE_MASK ) | ( (Configptr->CHAR_SIZE)<<1) ; /* setting the number of bits in UART frame */
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e0 e4       	ldi	r30, 0x40	; 64
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	28 2f       	mov	r18, r24
     c0c:	29 7f       	andi	r18, 0xF9	; 249
     c0e:	eb 81       	ldd	r30, Y+3	; 0x03
     c10:	fc 81       	ldd	r31, Y+4	; 0x04
     c12:	86 81       	ldd	r24, Z+6	; 0x06
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	82 2b       	or	r24, r18
     c1e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_STOP_BITS_MASK) | ( (Configptr->STOP_BIT)<<3) ; /* set the number of stop bits */
     c20:	a0 e4       	ldi	r26, 0x40	; 64
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e0 e4       	ldi	r30, 0x40	; 64
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	28 2f       	mov	r18, r24
     c2c:	27 7f       	andi	r18, 0xF7	; 247
     c2e:	eb 81       	ldd	r30, Y+3	; 0x03
     c30:	fc 81       	ldd	r31, Y+4	; 0x04
     c32:	85 81       	ldd	r24, Z+5	; 0x05
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	82 2b       	or	r24, r18
     c46:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_PARITY_MASK ) | ( (Configptr->PARITY)<<4) ; /* setting the PARITY */
     c48:	a0 e4       	ldi	r26, 0x40	; 64
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e0 e4       	ldi	r30, 0x40	; 64
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	28 2f       	mov	r18, r24
     c54:	2f 7c       	andi	r18, 0xCF	; 207
     c56:	eb 81       	ldd	r30, Y+3	; 0x03
     c58:	fc 81       	ldd	r31, Y+4	; 0x04
     c5a:	87 81       	ldd	r24, Z+7	; 0x07
     c5c:	88 2f       	mov	r24, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	82 95       	swap	r24
     c62:	92 95       	swap	r25
     c64:	90 7f       	andi	r25, 0xF0	; 240
     c66:	98 27       	eor	r25, r24
     c68:	80 7f       	andi	r24, 0xF0	; 240
     c6a:	98 27       	eor	r25, r24
     c6c:	82 2b       	or	r24, r18
     c6e:	8c 93       	st	X, r24

	CLEAR_BIT(UBRRH,URSEL); /* to access UBRRH not UCSRC */
     c70:	a0 e4       	ldi	r26, 0x40	; 64
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e0 e4       	ldi	r30, 0x40	; 64
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 77       	andi	r24, 0x7F	; 127
     c7c:	8c 93       	st	X, r24
	ubrr_value = (uint16)(((F_CPU / (Configptr->BAUD_RATE * 8UL))) - 1);
     c7e:	eb 81       	ldd	r30, Y+3	; 0x03
     c80:	fc 81       	ldd	r31, Y+4	; 0x04
     c82:	80 81       	ld	r24, Z
     c84:	91 81       	ldd	r25, Z+1	; 0x01
     c86:	a2 81       	ldd	r26, Z+2	; 0x02
     c88:	b3 81       	ldd	r27, Z+3	; 0x03
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	aa 1f       	adc	r26, r26
     c90:	bb 1f       	adc	r27, r27
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	aa 1f       	adc	r26, r26
     ca0:	bb 1f       	adc	r27, r27
     ca2:	9c 01       	movw	r18, r24
     ca4:	ad 01       	movw	r20, r26
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	92 e1       	ldi	r25, 0x12	; 18
     caa:	aa e7       	ldi	r26, 0x7A	; 122
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	bc 01       	movw	r22, r24
     cb0:	cd 01       	movw	r24, r26
     cb2:	0e 94 a4 19 	call	0x3348	; 0x3348 <__udivmodsi4>
     cb6:	da 01       	movw	r26, r20
     cb8:	c9 01       	movw	r24, r18
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value>>8;
     cc0:	e0 e4       	ldi	r30, 0x40	; 64
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	89 2f       	mov	r24, r25
     cca:	99 27       	eor	r25, r25
     ccc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     cce:	e9 e2       	ldi	r30, 0x29	; 41
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	80 83       	st	Z, r24

	g_endStringChar = Configptr->END_SRTING;
     cd6:	eb 81       	ldd	r30, Y+3	; 0x03
     cd8:	fc 81       	ldd	r31, Y+4	; 0x04
     cda:	84 81       	ldd	r24, Z+4	; 0x04
     cdc:	80 93 62 01 	sts	0x0162, r24
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     cfa:	eb e2       	ldi	r30, 0x2B	; 43
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	80 72       	andi	r24, 0x20	; 32
     d06:	90 70       	andi	r25, 0x00	; 0
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	b9 f3       	breq	.-18     	; 0xcfa <UART_sendByte+0xc>

	UDR = data;
     d0c:	ec e2       	ldi	r30, 0x2C	; 44
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	80 83       	st	Z, r24
}
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <UART_receiveByte>:

uint8 UART_receiveByte()
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     d24:	eb e2       	ldi	r30, 0x2B	; 43
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 23       	and	r24, r24
     d2c:	dc f7       	brge	.-10     	; 0xd24 <UART_receiveByte+0x8>

	return UDR;
     d2e:	ec e2       	ldi	r30, 0x2C	; 44
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
}
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <UART_sendString+0x6>
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	9b 83       	std	Y+3, r25	; 0x03
     d48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	0e c0       	rjmp	.+28     	; 0xd6a <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	9b 81       	ldd	r25, Y+3	; 0x03
     d58:	fc 01       	movw	r30, r24
     d5a:	e2 0f       	add	r30, r18
     d5c:	f3 1f       	adc	r31, r19
     d5e:	80 81       	ld	r24, Z
     d60:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
}

void UART_sendString(const uint8 *Str)
{
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	8f 5f       	subi	r24, 0xFF	; 255
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	9b 81       	ldd	r25, Y+3	; 0x03
     d74:	fc 01       	movw	r30, r24
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	80 81       	ld	r24, Z
     d7c:	88 23       	and	r24, r24
     d7e:	39 f7       	brne	.-50     	; 0xd4e <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
	}
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	00 d0       	rcall	.+0      	; 0xd96 <UART_receiveString+0xa>
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	9b 83       	std	Y+3, r25	; 0x03
     d9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     da0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	8c 01       	movw	r16, r24
     dae:	02 0f       	add	r16, r18
     db0:	13 1f       	adc	r17, r19
     db2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
     db6:	f8 01       	movw	r30, r16
     db8:	80 83       	st	Z, r24
     dba:	0f c0       	rjmp	.+30     	; 0xdda <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
	{
		i++;
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	8f 5f       	subi	r24, 0xFF	; 255
     dc0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	8c 01       	movw	r16, r24
     dce:	02 0f       	add	r16, r18
     dd0:	13 1f       	adc	r17, r19
     dd2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
     dd6:	f8 01       	movw	r30, r16
     dd8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	9b 81       	ldd	r25, Y+3	; 0x03
     de4:	fc 01       	movw	r30, r24
     de6:	e2 0f       	add	r30, r18
     de8:	f3 1f       	adc	r31, r19
     dea:	90 81       	ld	r25, Z
     dec:	80 91 62 01 	lds	r24, 0x0162
     df0:	98 17       	cp	r25, r24
     df2:	21 f7       	brne	.-56     	; 0xdbc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	9b 81       	ldd	r25, Y+3	; 0x03
     dfe:	fc 01       	movw	r30, r24
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	10 82       	st	Z, r1

}
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	08 95       	ret

00000e16 <UART_setCallBack>:

void UART_setCallBack( void(*a_ptr)(void) )
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <UART_setCallBack+0x6>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	90 93 61 01 	sts	0x0161, r25
     e2c:	80 93 60 01 	sts	0x0160, r24
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <__vector_7>:

/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     e64:	80 91 63 01 	lds	r24, 0x0163
     e68:	90 91 64 01 	lds	r25, 0x0164
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	29 f0       	breq	.+10     	; 0xe7a <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
     e70:	e0 91 63 01 	lds	r30, 0x0163
     e74:	f0 91 64 01 	lds	r31, 0x0164
     e78:	09 95       	icall
	}
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	2f 93       	push	r18
     eac:	3f 93       	push	r19
     eae:	4f 93       	push	r20
     eb0:	5f 93       	push	r21
     eb2:	6f 93       	push	r22
     eb4:	7f 93       	push	r23
     eb6:	8f 93       	push	r24
     eb8:	9f 93       	push	r25
     eba:	af 93       	push	r26
     ebc:	bf 93       	push	r27
     ebe:	ef 93       	push	r30
     ec0:	ff 93       	push	r31
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
     eca:	80 91 65 01 	lds	r24, 0x0165
     ece:	90 91 66 01 	lds	r25, 0x0166
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	29 f0       	breq	.+10     	; 0xee0 <__vector_9+0x40>
	{
		(*g_callBackPtr1)();
     ed6:	e0 91 63 01 	lds	r30, 0x0163
     eda:	f0 91 64 01 	lds	r31, 0x0164
     ede:	09 95       	icall
	}
}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	0f 90       	pop	r0
     f02:	1f 90       	pop	r1
     f04:	18 95       	reti

00000f06 <TIMER1_init>:

void TIMER1_init(Timer1_ConfigType * Config_Ptr)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <TIMER1_init+0x6>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     f14:	ef e4       	ldi	r30, 0x4F	; 79
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	8c e0       	ldi	r24, 0x0C	; 12
     f1a:	80 83       	st	Z, r24
	TCCR1B = (Config_Ptr->mode << WGM12);
     f1c:	ae e4       	ldi	r26, 0x4E	; 78
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e9 81       	ldd	r30, Y+1	; 0x01
     f22:	fa 81       	ldd	r31, Y+2	; 0x02
     f24:	85 81       	ldd	r24, Z+5	; 0x05
     f26:	88 0f       	add	r24, r24
     f28:	88 0f       	add	r24, r24
     f2a:	88 0f       	add	r24, r24
     f2c:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
     f2e:	ae e4       	ldi	r26, 0x4E	; 78
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ee e4       	ldi	r30, 0x4E	; 78
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	98 2f       	mov	r25, r24
     f3a:	98 7f       	andi	r25, 0xF8	; 248
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	84 81       	ldd	r24, Z+4	; 0x04
     f42:	89 2b       	or	r24, r25
     f44:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;
     f46:	ac e4       	ldi	r26, 0x4C	; 76
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e9 81       	ldd	r30, Y+1	; 0x01
     f4c:	fa 81       	ldd	r31, Y+2	; 0x02
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	9c 93       	st	X, r25
     f56:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == COMPARE)
     f58:	e9 81       	ldd	r30, Y+1	; 0x01
     f5a:	fa 81       	ldd	r31, Y+2	; 0x02
     f5c:	85 81       	ldd	r24, Z+5	; 0x05
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	51 f4       	brne	.+20     	; 0xf76 <TIMER1_init+0x70>
	{
		OCR1A = Config_Ptr->compare_value;
     f62:	ea e4       	ldi	r30, 0x4A	; 74
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	a9 81       	ldd	r26, Y+1	; 0x01
     f68:	ba 81       	ldd	r27, Y+2	; 0x02
     f6a:	12 96       	adiw	r26, 0x02	; 2
     f6c:	8d 91       	ld	r24, X+
     f6e:	9c 91       	ld	r25, X
     f70:	13 97       	sbiw	r26, 0x03	; 3
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	80 83       	st	Z, r24
	}
	TIMSK |= (1<<OCIE1A) ;
     f76:	a9 e5       	ldi	r26, 0x59	; 89
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e9 e5       	ldi	r30, 0x59	; 89
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 61       	ori	r24, 0x10	; 16
     f82:	8c 93       	st	X, r24
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <TIMER1_deInit>:

void TIMER1_deInit()
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     f96:	ef e4       	ldi	r30, 0x4F	; 79
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	10 82       	st	Z, r1
	TCCR1B = 0;
     f9c:	ee e4       	ldi	r30, 0x4E	; 78
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	10 82       	st	Z, r1
	TCNT1 = 0;
     fa2:	ec e4       	ldi	r30, 0x4C	; 76
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	11 82       	std	Z+1, r1	; 0x01
     fa8:	10 82       	st	Z, r1
	OCR1A = 0;
     faa:	ea e4       	ldi	r30, 0x4A	; 74
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	11 82       	std	Z+1, r1	; 0x01
     fb0:	10 82       	st	Z, r1
}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <TIMER1_COMP_setCallBack>:

void TIMER1_COMP_setCallBack( void(*a_ptr)(void) )
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <TIMER1_COMP_setCallBack+0x6>
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	90 93 64 01 	sts	0x0164, r25
     fce:	80 93 63 01 	sts	0x0163, r24
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <TIMER1_OVF_setCallBack>:

void TIMER1_OVF_setCallBack( void(*a_ptr)(void) )
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <TIMER1_OVF_setCallBack+0x6>
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	9a 83       	std	Y+2, r25	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	90 93 66 01 	sts	0x0166, r25
     ff2:	80 93 65 01 	sts	0x0165, r24
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <GPIO_setupPinDirection+0x6>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_setupPinDirection+0x8>
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	6a 83       	std	Y+2, r22	; 0x02
    1012:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	88 30       	cpi	r24, 0x08	; 8
    1018:	08 f0       	brcs	.+2      	; 0x101c <GPIO_setupPinDirection+0x1c>
    101a:	d5 c0       	rjmp	.+426    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	08 f0       	brcs	.+2      	; 0x1024 <GPIO_setupPinDirection+0x24>
    1022:	d1 c0       	rjmp	.+418    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <GPIO_setupPinDirection+0x3a>
    1038:	43 c0       	rjmp	.+134    	; 0x10c0 <GPIO_setupPinDirection+0xc0>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <GPIO_setupPinDirection+0x4e>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	71 f0       	breq	.+28     	; 0x1068 <GPIO_setupPinDirection+0x68>
    104c:	bc c0       	rjmp	.+376    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <GPIO_setupPinDirection+0x5a>
    1058:	5f c0       	rjmp	.+190    	; 0x1118 <GPIO_setupPinDirection+0x118>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	91 05       	cpc	r25, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <GPIO_setupPinDirection+0x66>
    1064:	85 c0       	rjmp	.+266    	; 0x1170 <GPIO_setupPinDirection+0x170>
    1066:	af c0       	rjmp	.+350    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	a1 f4       	brne	.+40     	; 0x1096 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    106e:	aa e3       	ldi	r26, 0x3A	; 58
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ea e3       	ldi	r30, 0x3A	; 58
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <GPIO_setupPinDirection+0x8c>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <GPIO_setupPinDirection+0x88>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	98 c0       	rjmp	.+304    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1096:	aa e3       	ldi	r26, 0x3A	; 58
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ea e3       	ldi	r30, 0x3A	; 58
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_setupPinDirection+0xb4>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_setupPinDirection+0xb0>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	83 c0       	rjmp	.+262    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10c6:	a7 e3       	ldi	r26, 0x37	; 55
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e7 e3       	ldi	r30, 0x37	; 55
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_setupPinDirection+0xe4>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_setupPinDirection+0xe0>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	6c c0       	rjmp	.+216    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10ee:	a7 e3       	ldi	r26, 0x37	; 55
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e3       	ldi	r30, 0x37	; 55
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_setupPinDirection+0x10c>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_setupPinDirection+0x108>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	57 c0       	rjmp	.+174    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	a1 f4       	brne	.+40     	; 0x1146 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    111e:	a4 e3       	ldi	r26, 0x34	; 52
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e4 e3       	ldi	r30, 0x34	; 52
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_setupPinDirection+0x13c>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_setupPinDirection+0x138>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1146:	a4 e3       	ldi	r26, 0x34	; 52
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e4 e3       	ldi	r30, 0x34	; 52
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_setupPinDirection+0x164>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_setupPinDirection+0x160>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	2b c0       	rjmp	.+86     	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	a1 f4       	brne	.+40     	; 0x119e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1176:	a1 e3       	ldi	r26, 0x31	; 49
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e1 e3       	ldi	r30, 0x31	; 49
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPIO_setupPinDirection+0x194>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <GPIO_setupPinDirection+0x190>
    1198:	84 2b       	or	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    119e:	a1 e3       	ldi	r26, 0x31	; 49
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e1 e3       	ldi	r30, 0x31	; 49
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_setupPinDirection+0x1bc>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_setupPinDirection+0x1b8>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <GPIO_writePin+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_writePin+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    11e8:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <GPIO_writePin+0x1c>
    11f0:	d5 c0       	rjmp	.+426    	; 0x139c <GPIO_writePin+0x1c6>
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	84 30       	cpi	r24, 0x04	; 4
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <GPIO_writePin+0x24>
    11f8:	d1 c0       	rjmp	.+418    	; 0x139c <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch(port_num)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3d 83       	std	Y+5, r19	; 0x05
    1202:	2c 83       	std	Y+4, r18	; 0x04
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <GPIO_writePin+0x3a>
    120e:	43 c0       	rjmp	.+134    	; 0x1296 <GPIO_writePin+0xc0>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <GPIO_writePin+0x4e>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	71 f0       	breq	.+28     	; 0x123e <GPIO_writePin+0x68>
    1222:	bc c0       	rjmp	.+376    	; 0x139c <GPIO_writePin+0x1c6>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_writePin+0x5a>
    122e:	5f c0       	rjmp	.+190    	; 0x12ee <GPIO_writePin+0x118>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <GPIO_writePin+0x66>
    123a:	85 c0       	rjmp	.+266    	; 0x1346 <GPIO_writePin+0x170>
    123c:	af c0       	rjmp	.+350    	; 0x139c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	a1 f4       	brne	.+40     	; 0x126c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1244:	ab e3       	ldi	r26, 0x3B	; 59
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	eb e3       	ldi	r30, 0x3B	; 59
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_writePin+0x8c>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_writePin+0x88>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	98 c0       	rjmp	.+304    	; 0x139c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    126c:	ab e3       	ldi	r26, 0x3B	; 59
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_writePin+0xb4>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_writePin+0xb0>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	83 c0       	rjmp	.+262    	; 0x139c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    129c:	a8 e3       	ldi	r26, 0x38	; 56
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e8 e3       	ldi	r30, 0x38	; 56
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <GPIO_writePin+0xe4>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <GPIO_writePin+0xe0>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	6c c0       	rjmp	.+216    	; 0x139c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12c4:	a8 e3       	ldi	r26, 0x38	; 56
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e3       	ldi	r30, 0x38	; 56
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_writePin+0x10c>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_writePin+0x108>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	57 c0       	rjmp	.+174    	; 0x139c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a1 f4       	brne	.+40     	; 0x131c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12f4:	a5 e3       	ldi	r26, 0x35	; 53
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <GPIO_writePin+0x13c>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <GPIO_writePin+0x138>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	40 c0       	rjmp	.+128    	; 0x139c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    131c:	a5 e3       	ldi	r26, 0x35	; 53
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e5 e3       	ldi	r30, 0x35	; 53
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_writePin+0x164>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_writePin+0x160>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	2b c0       	rjmp	.+86     	; 0x139c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	a1 f4       	brne	.+40     	; 0x1374 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    134c:	a2 e3       	ldi	r26, 0x32	; 50
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e2 e3       	ldi	r30, 0x32	; 50
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_writePin+0x194>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_writePin+0x190>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	14 c0       	rjmp	.+40     	; 0x139c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1374:	a2 e3       	ldi	r26, 0x32	; 50
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e2 e3       	ldi	r30, 0x32	; 50
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_writePin+0x1bc>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_writePin+0x1b8>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <GPIO_readPin+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <GPIO_readPin+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 GPIO_outPin = LOGIC_LOW; /* the default return value */
    13be:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 30       	cpi	r24, 0x08	; 8
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <GPIO_readPin+0x1c>
    13c6:	84 c0       	rjmp	.+264    	; 0x14d0 <GPIO_readPin+0x124>
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	84 30       	cpi	r24, 0x04	; 4
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <GPIO_readPin+0x24>
    13ce:	80 c0       	rjmp	.+256    	; 0x14d0 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	4c 81       	ldd	r20, Y+4	; 0x04
    13dc:	5d 81       	ldd	r21, Y+5	; 0x05
    13de:	41 30       	cpi	r20, 0x01	; 1
    13e0:	51 05       	cpc	r21, r1
    13e2:	79 f1       	breq	.+94     	; 0x1442 <GPIO_readPin+0x96>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	91 05       	cpc	r25, r1
    13ec:	34 f4       	brge	.+12     	; 0x13fa <GPIO_readPin+0x4e>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	21 15       	cp	r18, r1
    13f4:	31 05       	cpc	r19, r1
    13f6:	69 f0       	breq	.+26     	; 0x1412 <GPIO_readPin+0x66>
    13f8:	6b c0       	rjmp	.+214    	; 0x14d0 <GPIO_readPin+0x124>
    13fa:	4c 81       	ldd	r20, Y+4	; 0x04
    13fc:	5d 81       	ldd	r21, Y+5	; 0x05
    13fe:	42 30       	cpi	r20, 0x02	; 2
    1400:	51 05       	cpc	r21, r1
    1402:	b9 f1       	breq	.+110    	; 0x1472 <GPIO_readPin+0xc6>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <GPIO_readPin+0x64>
    140e:	49 c0       	rjmp	.+146    	; 0x14a2 <GPIO_readPin+0xf6>
    1410:	5f c0       	rjmp	.+190    	; 0x14d0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,pin_num) )
    1412:	e9 e3       	ldi	r30, 0x39	; 57
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a9 01       	movw	r20, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_readPin+0x7e>
    1426:	55 95       	asr	r21
    1428:	47 95       	ror	r20
    142a:	8a 95       	dec	r24
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_readPin+0x7a>
    142e:	ca 01       	movw	r24, r20
    1430:	81 70       	andi	r24, 0x01	; 1
    1432:	90 70       	andi	r25, 0x00	; 0
    1434:	88 23       	and	r24, r24
    1436:	19 f0       	breq	.+6      	; 0x143e <GPIO_readPin+0x92>
			{
				GPIO_outPin = LOGIC_HIGH;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	49 c0       	rjmp	.+146    	; 0x14d0 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    143e:	19 82       	std	Y+1, r1	; 0x01
    1440:	47 c0       	rjmp	.+142    	; 0x14d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
    1442:	e6 e3       	ldi	r30, 0x36	; 54
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a9 01       	movw	r20, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_readPin+0xae>
    1456:	55 95       	asr	r21
    1458:	47 95       	ror	r20
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_readPin+0xaa>
    145e:	ca 01       	movw	r24, r20
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	90 70       	andi	r25, 0x00	; 0
    1464:	88 23       	and	r24, r24
    1466:	19 f0       	breq	.+6      	; 0x146e <GPIO_readPin+0xc2>
			{
				GPIO_outPin = LOGIC_HIGH;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	31 c0       	rjmp	.+98     	; 0x14d0 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    146e:	19 82       	std	Y+1, r1	; 0x01
    1470:	2f c0       	rjmp	.+94     	; 0x14d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
    1472:	e3 e3       	ldi	r30, 0x33	; 51
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <GPIO_readPin+0xde>
    1486:	55 95       	asr	r21
    1488:	47 95       	ror	r20
    148a:	8a 95       	dec	r24
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <GPIO_readPin+0xda>
    148e:	ca 01       	movw	r24, r20
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	88 23       	and	r24, r24
    1496:	19 f0       	breq	.+6      	; 0x149e <GPIO_readPin+0xf2>
			{
				GPIO_outPin = LOGIC_HIGH;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	19 c0       	rjmp	.+50     	; 0x14d0 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    149e:	19 82       	std	Y+1, r1	; 0x01
    14a0:	17 c0       	rjmp	.+46     	; 0x14d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
    14a2:	e0 e3       	ldi	r30, 0x30	; 48
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a9 01       	movw	r20, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_readPin+0x10e>
    14b6:	55 95       	asr	r21
    14b8:	47 95       	ror	r20
    14ba:	8a 95       	dec	r24
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_readPin+0x10a>
    14be:	ca 01       	movw	r24, r20
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	88 23       	and	r24, r24
    14c6:	19 f0       	breq	.+6      	; 0x14ce <GPIO_readPin+0x122>
			{
				GPIO_outPin = LOGIC_HIGH;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    14ce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return GPIO_outPin;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <GPIO_setupPortDirection+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <GPIO_setupPortDirection+0x8>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	90 f5       	brcc	.+100    	; 0x155c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3c 83       	std	Y+4, r19	; 0x04
    1500:	2b 83       	std	Y+3, r18	; 0x03
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	d1 f0       	breq	.+52     	; 0x1540 <GPIO_setupPortDirection+0x5e>
    150c:	2b 81       	ldd	r18, Y+3	; 0x03
    150e:	3c 81       	ldd	r19, Y+4	; 0x04
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <GPIO_setupPortDirection+0x3e>
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	61 f0       	breq	.+24     	; 0x1536 <GPIO_setupPortDirection+0x54>
    151e:	1e c0       	rjmp	.+60     	; 0x155c <GPIO_setupPortDirection+0x7a>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	81 f0       	breq	.+32     	; 0x154a <GPIO_setupPortDirection+0x68>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	91 05       	cpc	r25, r1
    1532:	81 f0       	breq	.+32     	; 0x1554 <GPIO_setupPortDirection+0x72>
    1534:	13 c0       	rjmp	.+38     	; 0x155c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1536:	ea e3       	ldi	r30, 0x3A	; 58
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	80 83       	st	Z, r24
    153e:	0e c0       	rjmp	.+28     	; 0x155c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1540:	e7 e3       	ldi	r30, 0x37	; 55
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	80 83       	st	Z, r24
    1548:	09 c0       	rjmp	.+18     	; 0x155c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    154a:	e4 e3       	ldi	r30, 0x34	; 52
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	80 83       	st	Z, r24
    1552:	04 c0       	rjmp	.+8      	; 0x155c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1554:	e1 e3       	ldi	r30, 0x31	; 49
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 83       	st	Z, r24
			break;
		}
	}
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <GPIO_writePort+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <GPIO_writePort+0x8>
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS) )
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	90 f5       	brcc	.+100    	; 0x15e4 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3c 83       	std	Y+4, r19	; 0x04
    1588:	2b 83       	std	Y+3, r18	; 0x03
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	91 05       	cpc	r25, r1
    1592:	d1 f0       	breq	.+52     	; 0x15c8 <GPIO_writePort+0x5e>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	2c f4       	brge	.+10     	; 0x15a8 <GPIO_writePort+0x3e>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	61 f0       	breq	.+24     	; 0x15be <GPIO_writePort+0x54>
    15a6:	1e c0       	rjmp	.+60     	; 0x15e4 <GPIO_writePort+0x7a>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <GPIO_writePort+0x68>
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	83 30       	cpi	r24, 0x03	; 3
    15b8:	91 05       	cpc	r25, r1
    15ba:	81 f0       	breq	.+32     	; 0x15dc <GPIO_writePort+0x72>
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value ;
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	0e c0       	rjmp	.+28     	; 0x15e4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value ;
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value ;
    15d2:	e5 e3       	ldi	r30, 0x35	; 53
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	80 83       	st	Z, r24
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value ;
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <GPIO_readPort+0x6>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GPIO_readPort+0x8>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 GPIO_outPort = 0x00 ; /* the default return value */
    1600:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	90 f5       	brcc	.+100    	; 0x166c <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3c 83       	std	Y+4, r19	; 0x04
    1610:	2b 83       	std	Y+3, r18	; 0x03
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	d1 f0       	breq	.+52     	; 0x1650 <GPIO_readPort+0x5e>
    161c:	2b 81       	ldd	r18, Y+3	; 0x03
    161e:	3c 81       	ldd	r19, Y+4	; 0x04
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	2c f4       	brge	.+10     	; 0x1630 <GPIO_readPort+0x3e>
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	61 f0       	breq	.+24     	; 0x1646 <GPIO_readPort+0x54>
    162e:	1e c0       	rjmp	.+60     	; 0x166c <GPIO_readPort+0x7a>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	81 f0       	breq	.+32     	; 0x165a <GPIO_readPort+0x68>
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	81 f0       	breq	.+32     	; 0x1664 <GPIO_readPort+0x72>
    1644:	13 c0       	rjmp	.+38     	; 0x166c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			GPIO_outPort = PINA;
    1646:	e9 e3       	ldi	r30, 0x39	; 57
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	0e c0       	rjmp	.+28     	; 0x166c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			GPIO_outPort = PINB;
    1650:	e6 e3       	ldi	r30, 0x36	; 54
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	09 c0       	rjmp	.+18     	; 0x166c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			GPIO_outPort = PINC;
    165a:	e3 e3       	ldi	r30, 0x33	; 51
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	04 c0       	rjmp	.+8      	; 0x166c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			GPIO_outPort = PIND;
    1664:	e0 e3       	ldi	r30, 0x30	; 48
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return GPIO_outPort;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <LCD_init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/GPIO/gpio.h"
#include "util/delay.h"

void LCD_init(void)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	2e 97       	sbiw	r28, 0x0e	; 14
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1690:	83 e0       	ldi	r24, 0x03	; 3
    1692:	66 e0       	ldi	r22, 0x06	; 6
    1694:	41 e0       	ldi	r20, 0x01	; 1
    1696:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	67 e0       	ldi	r22, 0x07	; 7
    169e:	41 e0       	ldi	r20, 0x01	; 1
    16a0:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a0 ea       	ldi	r26, 0xA0	; 160
    16aa:	b1 e4       	ldi	r27, 0x41	; 65
    16ac:	8b 87       	std	Y+11, r24	; 0x0b
    16ae:	9c 87       	std	Y+12, r25	; 0x0c
    16b0:	ad 87       	std	Y+13, r26	; 0x0d
    16b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a ef       	ldi	r20, 0xFA	; 250
    16c2:	54 e4       	ldi	r21, 0x44	; 68
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8f 83       	std	Y+7, r24	; 0x07
    16ce:	98 87       	std	Y+8, r25	; 0x08
    16d0:	a9 87       	std	Y+9, r26	; 0x09
    16d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <LCD_init+0x7a>
		__ticks = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <LCD_init+0xf8>
	else if (__tmp > 65535)
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170a:	18 16       	cp	r1, r24
    170c:	4c f5       	brge	.+82     	; 0x1760 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1710:	7c 85       	ldd	r23, Y+12	; 0x0c
    1712:	8d 85       	ldd	r24, Y+13	; 0x0d
    1714:	9e 85       	ldd	r25, Y+14	; 0x0e
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e2       	ldi	r20, 0x20	; 32
    171c:	51 e4       	ldi	r21, 0x41	; 65
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <LCD_init+0xda>
    1738:	88 ec       	ldi	r24, 0xC8	; 200
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_init+0xc8>
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f7       	brne	.-38     	; 0x1738 <LCD_init+0xbc>
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	9e 81       	ldd	r25, Y+6	; 0x06
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <LCD_init+0x104>
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	6f ef       	ldi	r22, 0xFF	; 255
    178c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1790:	88 e3       	ldi	r24, 0x38	; 56
    1792:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1796:	8c e0       	ldi	r24, 0x0C	; 12
    1798:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>
}
    17a2:	2e 96       	adiw	r28, 0x0e	; 14
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	e9 97       	sbiw	r28, 0x39	; 57
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_LOW); /* Rs = 0 */
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	66 e0       	ldi	r22, 0x06	; 6
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e8       	ldi	r26, 0x80	; 128
    17da:	bf e3       	ldi	r27, 0x3F	; 63
    17dc:	8d ab       	std	Y+53, r24	; 0x35
    17de:	9e ab       	std	Y+54, r25	; 0x36
    17e0:	af ab       	std	Y+55, r26	; 0x37
    17e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6d a9       	ldd	r22, Y+53	; 0x35
    17e6:	7e a9       	ldd	r23, Y+54	; 0x36
    17e8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ea:	98 ad       	ldd	r25, Y+56	; 0x38
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a ef       	ldi	r20, 0xFA	; 250
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	89 ab       	std	Y+49, r24	; 0x31
    17fe:	9a ab       	std	Y+50, r25	; 0x32
    1800:	ab ab       	std	Y+51, r26	; 0x33
    1802:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1804:	69 a9       	ldd	r22, Y+49	; 0x31
    1806:	7a a9       	ldd	r23, Y+50	; 0x32
    1808:	8b a9       	ldd	r24, Y+51	; 0x33
    180a:	9c a9       	ldd	r25, Y+52	; 0x34
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <LCD_sendCommand+0x72>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	98 ab       	std	Y+48, r25	; 0x30
    1822:	8f a7       	std	Y+47, r24	; 0x2f
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1826:	69 a9       	ldd	r22, Y+49	; 0x31
    1828:	7a a9       	ldd	r23, Y+50	; 0x32
    182a:	8b a9       	ldd	r24, Y+51	; 0x33
    182c:	9c a9       	ldd	r25, Y+52	; 0x34
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6d a9       	ldd	r22, Y+53	; 0x35
    1840:	7e a9       	ldd	r23, Y+54	; 0x36
    1842:	8f a9       	ldd	r24, Y+55	; 0x37
    1844:	98 ad       	ldd	r25, Y+56	; 0x38
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	98 ab       	std	Y+48, r25	; 0x30
    1864:	8f a7       	std	Y+47, r24	; 0x2f
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <LCD_sendCommand+0xd2>
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9e a7       	std	Y+46, r25	; 0x2e
    186e:	8d a7       	std	Y+45, r24	; 0x2d
    1870:	8d a5       	ldd	r24, Y+45	; 0x2d
    1872:	9e a5       	ldd	r25, Y+46	; 0x2e
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_sendCommand+0xc0>
    1878:	9e a7       	std	Y+46, r25	; 0x2e
    187a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8f a5       	ldd	r24, Y+47	; 0x2f
    187e:	98 a9       	ldd	r25, Y+48	; 0x30
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	98 ab       	std	Y+48, r25	; 0x30
    1884:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8f a5       	ldd	r24, Y+47	; 0x2f
    1888:	98 a9       	ldd	r25, Y+48	; 0x30
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <LCD_sendCommand+0xb4>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	69 a9       	ldd	r22, Y+49	; 0x31
    1892:	7a a9       	ldd	r23, Y+50	; 0x32
    1894:	8b a9       	ldd	r24, Y+51	; 0x33
    1896:	9c a9       	ldd	r25, Y+52	; 0x34
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	98 ab       	std	Y+48, r25	; 0x30
    18a2:	8f a7       	std	Y+47, r24	; 0x2f
    18a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a6:	98 a9       	ldd	r25, Y+48	; 0x30
    18a8:	9c a7       	std	Y+44, r25	; 0x2c
    18aa:	8b a7       	std	Y+43, r24	; 0x2b
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_sendCommand+0xfc>
    18b4:	9c a7       	std	Y+44, r25	; 0x2c
    18b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	67 e0       	ldi	r22, 0x07	; 7
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e8       	ldi	r26, 0x80	; 128
    18c8:	bf e3       	ldi	r27, 0x3F	; 63
    18ca:	8f a3       	std	Y+39, r24	; 0x27
    18cc:	98 a7       	std	Y+40, r25	; 0x28
    18ce:	a9 a7       	std	Y+41, r26	; 0x29
    18d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	6f a1       	ldd	r22, Y+39	; 0x27
    18d4:	78 a5       	ldd	r23, Y+40	; 0x28
    18d6:	89 a5       	ldd	r24, Y+41	; 0x29
    18d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a ef       	ldi	r20, 0xFA	; 250
    18e0:	54 e4       	ldi	r21, 0x44	; 68
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8b a3       	std	Y+35, r24	; 0x23
    18ec:	9c a3       	std	Y+36, r25	; 0x24
    18ee:	ad a3       	std	Y+37, r26	; 0x25
    18f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f2:	6b a1       	ldd	r22, Y+35	; 0x23
    18f4:	7c a1       	ldd	r23, Y+36	; 0x24
    18f6:	8d a1       	ldd	r24, Y+37	; 0x25
    18f8:	9e a1       	ldd	r25, Y+38	; 0x26
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <LCD_sendCommand+0x160>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9a a3       	std	Y+34, r25	; 0x22
    1910:	89 a3       	std	Y+33, r24	; 0x21
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1914:	6b a1       	ldd	r22, Y+35	; 0x23
    1916:	7c a1       	ldd	r23, Y+36	; 0x24
    1918:	8d a1       	ldd	r24, Y+37	; 0x25
    191a:	9e a1       	ldd	r25, Y+38	; 0x26
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	6f a1       	ldd	r22, Y+39	; 0x27
    192e:	78 a5       	ldd	r23, Y+40	; 0x28
    1930:	89 a5       	ldd	r24, Y+41	; 0x29
    1932:	9a a5       	ldd	r25, Y+42	; 0x2a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <LCD_sendCommand+0x1c0>
    1956:	88 ec       	ldi	r24, 0xC8	; 200
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	98 a3       	std	Y+32, r25	; 0x20
    195c:	8f 8f       	std	Y+31, r24	; 0x1f
    195e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1960:	98 a1       	ldd	r25, Y+32	; 0x20
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_sendCommand+0x1ae>
    1966:	98 a3       	std	Y+32, r25	; 0x20
    1968:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	89 a1       	ldd	r24, Y+33	; 0x21
    196c:	9a a1       	ldd	r25, Y+34	; 0x22
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9a a3       	std	Y+34, r25	; 0x22
    1972:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	89 a1       	ldd	r24, Y+33	; 0x21
    1976:	9a a1       	ldd	r25, Y+34	; 0x22
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <LCD_sendCommand+0x1a2>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6b a1       	ldd	r22, Y+35	; 0x23
    1980:	7c a1       	ldd	r23, Y+36	; 0x24
    1982:	8d a1       	ldd	r24, Y+37	; 0x25
    1984:	9e a1       	ldd	r25, Y+38	; 0x26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9a a3       	std	Y+34, r25	; 0x22
    1990:	89 a3       	std	Y+33, r24	; 0x21
    1992:	89 a1       	ldd	r24, Y+33	; 0x21
    1994:	9a a1       	ldd	r25, Y+34	; 0x22
    1996:	9e 8f       	std	Y+30, r25	; 0x1e
    1998:	8d 8f       	std	Y+29, r24	; 0x1d
    199a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_sendCommand+0x1ea>
    19a2:	9e 8f       	std	Y+30, r25	; 0x1e
    19a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command); /* write command */
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	69 ad       	ldd	r22, Y+57	; 0x39
    19aa:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_writePort>
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 e8       	ldi	r26, 0x80	; 128
    19b4:	bf e3       	ldi	r27, 0x3F	; 63
    19b6:	89 8f       	std	Y+25, r24	; 0x19
    19b8:	9a 8f       	std	Y+26, r25	; 0x1a
    19ba:	ab 8f       	std	Y+27, r26	; 0x1b
    19bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19be:	69 8d       	ldd	r22, Y+25	; 0x19
    19c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	4a ef       	ldi	r20, 0xFA	; 250
    19cc:	54 e4       	ldi	r21, 0x44	; 68
    19ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	8d 8b       	std	Y+21, r24	; 0x15
    19d8:	9e 8b       	std	Y+22, r25	; 0x16
    19da:	af 8b       	std	Y+23, r26	; 0x17
    19dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <LCD_sendCommand+0x24c>
		__ticks = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
    19fe:	3f c0       	rjmp	.+126    	; 0x1a7e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a00:	6d 89       	ldd	r22, Y+21	; 0x15
    1a02:	7e 89       	ldd	r23, Y+22	; 0x16
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	4c f5       	brge	.+82     	; 0x1a6a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a18:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <LCD_sendCommand+0x2ac>
    1a42:	88 ec       	ldi	r24, 0xC8	; 200
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	89 8b       	std	Y+17, r24	; 0x11
    1a4a:	89 89       	ldd	r24, Y+17	; 0x11
    1a4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_sendCommand+0x29a>
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	69 f7       	brne	.-38     	; 0x1a42 <LCD_sendCommand+0x28e>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a70:	98 8d       	ldd	r25, Y+24	; 0x18
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a80:	9c 89       	ldd	r25, Y+20	; 0x14
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	98 89       	ldd	r25, Y+16	; 0x10
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <LCD_sendCommand+0x2d6>
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	67 e0       	ldi	r22, 0x07	; 7
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e8       	ldi	r26, 0x80	; 128
    1aa2:	bf e3       	ldi	r27, 0x3F	; 63
    1aa4:	8b 87       	std	Y+11, r24	; 0x0b
    1aa6:	9c 87       	std	Y+12, r25	; 0x0c
    1aa8:	ad 87       	std	Y+13, r26	; 0x0d
    1aaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a ef       	ldi	r20, 0xFA	; 250
    1aba:	54 e4       	ldi	r21, 0x44	; 68
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	8f 83       	std	Y+7, r24	; 0x07
    1ac6:	98 87       	std	Y+8, r25	; 0x08
    1ac8:	a9 87       	std	Y+9, r26	; 0x09
    1aca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae0:	88 23       	and	r24, r24
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	3f c0       	rjmp	.+126    	; 0x1b6c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	4c f5       	brge	.+82     	; 0x1b58 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e2       	ldi	r20, 0x20	; 32
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	0f c0       	rjmp	.+30     	; 0x1b4e <LCD_sendCommand+0x39a>
    1b30:	88 ec       	ldi	r24, 0xC8	; 200
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_sendCommand+0x388>
    1b40:	9c 83       	std	Y+4, r25	; 0x04
    1b42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	9e 81       	ldd	r25, Y+6	; 0x06
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	69 f7       	brne	.-38     	; 0x1b30 <LCD_sendCommand+0x37c>
    1b56:	14 c0       	rjmp	.+40     	; 0x1b80 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_sendCommand+0x3c4>
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#endif
}
    1b80:	e9 96       	adiw	r28, 0x39	; 57
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	e9 97       	sbiw	r28, 0x39	; 57
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_HIGH); /* Rs = 0 */
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	66 e0       	ldi	r22, 0x06	; 6
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e8       	ldi	r26, 0x80	; 128
    1bb8:	bf e3       	ldi	r27, 0x3F	; 63
    1bba:	8d ab       	std	Y+53, r24	; 0x35
    1bbc:	9e ab       	std	Y+54, r25	; 0x36
    1bbe:	af ab       	std	Y+55, r26	; 0x37
    1bc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1bc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1bc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4a ef       	ldi	r20, 0xFA	; 250
    1bd0:	54 e4       	ldi	r21, 0x44	; 68
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	89 ab       	std	Y+49, r24	; 0x31
    1bdc:	9a ab       	std	Y+50, r25	; 0x32
    1bde:	ab ab       	std	Y+51, r26	; 0x33
    1be0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1be2:	69 a9       	ldd	r22, Y+49	; 0x31
    1be4:	7a a9       	ldd	r23, Y+50	; 0x32
    1be6:	8b a9       	ldd	r24, Y+51	; 0x33
    1be8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e8       	ldi	r20, 0x80	; 128
    1bf0:	5f e3       	ldi	r21, 0x3F	; 63
    1bf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf6:	88 23       	and	r24, r24
    1bf8:	2c f4       	brge	.+10     	; 0x1c04 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
    1c02:	3f c0       	rjmp	.+126    	; 0x1c82 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c04:	69 a9       	ldd	r22, Y+49	; 0x31
    1c06:	7a a9       	ldd	r23, Y+50	; 0x32
    1c08:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	3f ef       	ldi	r19, 0xFF	; 255
    1c10:	4f e7       	ldi	r20, 0x7F	; 127
    1c12:	57 e4       	ldi	r21, 0x47	; 71
    1c14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c18:	18 16       	cp	r1, r24
    1c1a:	4c f5       	brge	.+82     	; 0x1c6e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c20:	8f a9       	ldd	r24, Y+55	; 0x37
    1c22:	98 ad       	ldd	r25, Y+56	; 0x38
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e2       	ldi	r20, 0x20	; 32
    1c2a:	51 e4       	ldi	r21, 0x41	; 65
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	98 ab       	std	Y+48, r25	; 0x30
    1c42:	8f a7       	std	Y+47, r24	; 0x2f
    1c44:	0f c0       	rjmp	.+30     	; 0x1c64 <LCD_displayCharacter+0xd2>
    1c46:	88 ec       	ldi	r24, 0xC8	; 200
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9e a7       	std	Y+46, r25	; 0x2e
    1c4c:	8d a7       	std	Y+45, r24	; 0x2d
    1c4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c50:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_displayCharacter+0xc0>
    1c56:	9e a7       	std	Y+46, r25	; 0x2e
    1c58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	98 ab       	std	Y+48, r25	; 0x30
    1c62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c66:	98 a9       	ldd	r25, Y+48	; 0x30
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	69 f7       	brne	.-38     	; 0x1c46 <LCD_displayCharacter+0xb4>
    1c6c:	14 c0       	rjmp	.+40     	; 0x1c96 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c70:	7a a9       	ldd	r23, Y+50	; 0x32
    1c72:	8b a9       	ldd	r24, Y+51	; 0x33
    1c74:	9c a9       	ldd	r25, Y+52	; 0x34
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	98 ab       	std	Y+48, r25	; 0x30
    1c80:	8f a7       	std	Y+47, r24	; 0x2f
    1c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c84:	98 a9       	ldd	r25, Y+48	; 0x30
    1c86:	9c a7       	std	Y+44, r25	; 0x2c
    1c88:	8b a7       	std	Y+43, r24	; 0x2b
    1c8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_displayCharacter+0xfc>
    1c92:	9c a7       	std	Y+44, r25	; 0x2c
    1c94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	67 e0       	ldi	r22, 0x07	; 7
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e8       	ldi	r26, 0x80	; 128
    1ca6:	bf e3       	ldi	r27, 0x3F	; 63
    1ca8:	8f a3       	std	Y+39, r24	; 0x27
    1caa:	98 a7       	std	Y+40, r25	; 0x28
    1cac:	a9 a7       	std	Y+41, r26	; 0x29
    1cae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a ef       	ldi	r20, 0xFA	; 250
    1cbe:	54 e4       	ldi	r21, 0x44	; 68
    1cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8b a3       	std	Y+35, r24	; 0x23
    1cca:	9c a3       	std	Y+36, r25	; 0x24
    1ccc:	ad a3       	std	Y+37, r26	; 0x25
    1cce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e8       	ldi	r20, 0x80	; 128
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce4:	88 23       	and	r24, r24
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9a a3       	std	Y+34, r25	; 0x22
    1cee:	89 a3       	std	Y+33, r24	; 0x21
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	4c f5       	brge	.+82     	; 0x1d5c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9a a3       	std	Y+34, r25	; 0x22
    1d30:	89 a3       	std	Y+33, r24	; 0x21
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <LCD_displayCharacter+0x1c0>
    1d34:	88 ec       	ldi	r24, 0xC8	; 200
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	98 a3       	std	Y+32, r25	; 0x20
    1d3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_displayCharacter+0x1ae>
    1d44:	98 a3       	std	Y+32, r25	; 0x20
    1d46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9a a3       	std	Y+34, r25	; 0x22
    1d50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	89 a1       	ldd	r24, Y+33	; 0x21
    1d54:	9a a1       	ldd	r25, Y+34	; 0x22
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <LCD_displayCharacter+0x1a2>
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d60:	8d a1       	ldd	r24, Y+37	; 0x25
    1d62:	9e a1       	ldd	r25, Y+38	; 0x26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9a a3       	std	Y+34, r25	; 0x22
    1d6e:	89 a3       	std	Y+33, r24	; 0x21
    1d70:	89 a1       	ldd	r24, Y+33	; 0x21
    1d72:	9a a1       	ldd	r25, Y+34	; 0x22
    1d74:	9e 8f       	std	Y+30, r25	; 0x1e
    1d76:	8d 8f       	std	Y+29, r24	; 0x1d
    1d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <LCD_displayCharacter+0x1ea>
    1d80:	9e 8f       	std	Y+30, r25	; 0x1e
    1d82:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data); /* write command */
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	69 ad       	ldd	r22, Y+57	; 0x39
    1d88:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_writePort>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e8       	ldi	r26, 0x80	; 128
    1d92:	bf e3       	ldi	r27, 0x3F	; 63
    1d94:	89 8f       	std	Y+25, r24	; 0x19
    1d96:	9a 8f       	std	Y+26, r25	; 0x1a
    1d98:	ab 8f       	std	Y+27, r26	; 0x1b
    1d9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	4a ef       	ldi	r20, 0xFA	; 250
    1daa:	54 e4       	ldi	r21, 0x44	; 68
    1dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8d 8b       	std	Y+21, r24	; 0x15
    1db6:	9e 8b       	std	Y+22, r25	; 0x16
    1db8:	af 8b       	std	Y+23, r26	; 0x17
    1dba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	2c f4       	brge	.+10     	; 0x1dde <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9c 8b       	std	Y+20, r25	; 0x14
    1dda:	8b 8b       	std	Y+19, r24	; 0x13
    1ddc:	3f c0       	rjmp	.+126    	; 0x1e5c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1dde:	6d 89       	ldd	r22, Y+21	; 0x15
    1de0:	7e 89       	ldd	r23, Y+22	; 0x16
    1de2:	8f 89       	ldd	r24, Y+23	; 0x17
    1de4:	98 8d       	ldd	r25, Y+24	; 0x18
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	3f ef       	ldi	r19, 0xFF	; 255
    1dea:	4f e7       	ldi	r20, 0x7F	; 127
    1dec:	57 e4       	ldi	r21, 0x47	; 71
    1dee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df2:	18 16       	cp	r1, r24
    1df4:	4c f5       	brge	.+82     	; 0x1e48 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df6:	69 8d       	ldd	r22, Y+25	; 0x19
    1df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9c 8b       	std	Y+20, r25	; 0x14
    1e1c:	8b 8b       	std	Y+19, r24	; 0x13
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <LCD_displayCharacter+0x2ac>
    1e20:	88 ec       	ldi	r24, 0xC8	; 200
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9a 8b       	std	Y+18, r25	; 0x12
    1e26:	89 8b       	std	Y+17, r24	; 0x11
    1e28:	89 89       	ldd	r24, Y+17	; 0x11
    1e2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_displayCharacter+0x29a>
    1e30:	9a 8b       	std	Y+18, r25	; 0x12
    1e32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	9c 8b       	std	Y+20, r25	; 0x14
    1e3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e40:	9c 89       	ldd	r25, Y+20	; 0x14
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	69 f7       	brne	.-38     	; 0x1e20 <LCD_displayCharacter+0x28e>
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e48:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	9c 8b       	std	Y+20, r25	; 0x14
    1e5a:	8b 8b       	std	Y+19, r24	; 0x13
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	98 8b       	std	Y+16, r25	; 0x10
    1e62:	8f 87       	std	Y+15, r24	; 0x0f
    1e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e66:	98 89       	ldd	r25, Y+16	; 0x10
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_displayCharacter+0x2d6>
    1e6c:	98 8b       	std	Y+16, r25	; 0x10
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	67 e0       	ldi	r22, 0x07	; 7
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e8       	ldi	r26, 0x80	; 128
    1e80:	bf e3       	ldi	r27, 0x3F	; 63
    1e82:	8b 87       	std	Y+11, r24	; 0x0b
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	ad 87       	std	Y+13, r26	; 0x0d
    1e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a ef       	ldi	r20, 0xFA	; 250
    1e98:	54 e4       	ldi	r21, 0x44	; 68
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	a9 87       	std	Y+9, r26	; 0x09
    1ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <LCD_displayCharacter+0x39a>
    1f0e:	88 ec       	ldi	r24, 0xC8	; 200
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_displayCharacter+0x388>
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <LCD_displayCharacter+0x37c>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_displayCharacter+0x3c4>
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#endif
}
    1f5e:	e9 96       	adiw	r28, 0x39	; 57
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <LCD_displayString>:

void LCD_displayString(char * string)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <LCD_displayString+0x6>
    1f76:	0f 92       	push	r0
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    1f80:	19 82       	std	Y+1, r1	; 0x01
    1f82:	0e c0       	rjmp	.+28     	; 0x1fa0 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(string[i]);
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	fc 01       	movw	r30, r24
    1f90:	e2 0f       	add	r30, r18
    1f92:	f3 1f       	adc	r31, r19
    1f94:	80 81       	ld	r24, Z
    1f96:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
#endif
}

void LCD_displayString(char * string)
{
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	8f 5f       	subi	r24, 0xFF	; 255
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1faa:	fc 01       	movw	r30, r24
    1fac:	e2 0f       	add	r30, r18
    1fae:	f3 1f       	adc	r31, r19
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 23       	and	r24, r24
    1fb4:	39 f7       	brne	.-50     	; 0x1f84 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
	}
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <LCD_clearScreen>:

void LCD_clearScreen()
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>
}
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 column)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <LCD_moveCursor+0x6>
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <LCD_moveCursor+0x8>
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
    1fe6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_cursorAdress;
	switch(row)
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	3d 83       	std	Y+5, r19	; 0x05
    1ff0:	2c 83       	std	Y+4, r18	; 0x04
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	c1 f0       	breq	.+48     	; 0x202c <LCD_moveCursor+0x56>
    1ffc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    2000:	22 30       	cpi	r18, 0x02	; 2
    2002:	31 05       	cpc	r19, r1
    2004:	2c f4       	brge	.+10     	; 0x2010 <LCD_moveCursor+0x3a>
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	9d 81       	ldd	r25, Y+5	; 0x05
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	61 f0       	breq	.+24     	; 0x2026 <LCD_moveCursor+0x50>
    200e:	19 c0       	rjmp	.+50     	; 0x2042 <LCD_moveCursor+0x6c>
    2010:	2c 81       	ldd	r18, Y+4	; 0x04
    2012:	3d 81       	ldd	r19, Y+5	; 0x05
    2014:	22 30       	cpi	r18, 0x02	; 2
    2016:	31 05       	cpc	r19, r1
    2018:	69 f0       	breq	.+26     	; 0x2034 <LCD_moveCursor+0x5e>
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	9d 81       	ldd	r25, Y+5	; 0x05
    201e:	83 30       	cpi	r24, 0x03	; 3
    2020:	91 05       	cpc	r25, r1
    2022:	61 f0       	breq	.+24     	; 0x203c <LCD_moveCursor+0x66>
    2024:	0e c0       	rjmp	.+28     	; 0x2042 <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_cursorAdress = column;
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	0b c0       	rjmp	.+22     	; 0x2042 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_cursorAdress = 0x40 + column;
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	80 5c       	subi	r24, 0xC0	; 192
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	07 c0       	rjmp	.+14     	; 0x2042 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_cursorAdress = 0x10 + column;
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	80 5f       	subi	r24, 0xF0	; 240
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_cursorAdress = 0x50 + column;
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	80 5b       	subi	r24, 0xB0	; 176
    2040:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_cursorAdress |= LCD_SET_CURSOR_LOCATION ;
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	80 68       	ori	r24, 0x80	; 128
    2046:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_cursorAdress);
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 column , char * string)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <LCD_displayStringRowColumn+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <LCD_displayStringRowColumn+0x8>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	6a 83       	std	Y+2, r22	; 0x02
    206e:	5c 83       	std	Y+4, r21	; 0x04
    2070:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	6a 81       	ldd	r22, Y+2	; 0x02
    2076:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <LCD_moveCursor>
	LCD_displayString(string);
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LCD_displayString>
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <LCD_intgerToString>:

void LCD_intgerToString(int number)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	62 97       	sbiw	r28, 0x12	; 18
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	9a 8b       	std	Y+18, r25	; 0x12
    20a6:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(number,buffer,10);
    20a8:	89 89       	ldd	r24, Y+17	; 0x11
    20aa:	9a 89       	ldd	r25, Y+18	; 0x12
    20ac:	9e 01       	movw	r18, r28
    20ae:	2f 5f       	subi	r18, 0xFF	; 255
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	b9 01       	movw	r22, r18
    20b4:	4a e0       	ldi	r20, 0x0A	; 10
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	0e 94 fd 19 	call	0x33fa	; 0x33fa <itoa>
	LCD_displayString(buffer);
    20bc:	ce 01       	movw	r24, r28
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LCD_displayString>
}
    20c4:	62 96       	adiw	r28, 0x12	; 18
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <KEYPAD_init>:
#endif /* ---> STANDARD_KEYPAD */
/*******************************************************************************
*                      Functions Definitions                                  *
*******************************************************************************/
void KEYPAD_init()
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	62 e0       	ldi	r22, 0x02	; 2
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	63 e0       	ldi	r22, 0x03	; 3
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	64 e0       	ldi	r22, 0x04	; 4
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	65 e0       	ldi	r22, 0x05	; 5
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	66 e0       	ldi	r22, 0x06	; 6
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_INPUT);
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	67 e0       	ldi	r22, 0x07	; 7
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
#endif

	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, LOGIC_HIGH);
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	64 e0       	ldi	r22, 0x04	; 4
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, LOGIC_HIGH);
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	65 e0       	ldi	r22, 0x05	; 5
    2146:	41 e0       	ldi	r20, 0x01	; 1
    2148:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, LOGIC_HIGH);
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	66 e0       	ldi	r22, 0x06	; 6
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
	GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_HIGH);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, LOGIC_HIGH);
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	67 e0       	ldi	r22, 0x07	; 7
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
#endif
}
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <KEYPAD_getPressedKey>:

uint8 KEYPAD_getPressedKey()
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <KEYPAD_getPressedKey+0x6>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    217a:	19 82       	std	Y+1, r1	; 0x01
    217c:	3a c0       	rjmp	.+116    	; 0x21f2 <KEYPAD_getPressedKey+0x82>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	69 81       	ldd	r22, Y+1	; 0x01
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	69 81       	ldd	r22, Y+1	; 0x01
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    2192:	1a 82       	std	Y+2, r1	; 0x02
    2194:	23 c0       	rjmp	.+70     	; 0x21dc <KEYPAD_getPressedKey+0x6c>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	98 2f       	mov	r25, r24
    219a:	9c 5f       	subi	r25, 0xFC	; 252
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	69 2f       	mov	r22, r25
    21a0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_readPin>
    21a4:	88 23       	and	r24, r24
    21a6:	b9 f4       	brne	.+46     	; 0x21d6 <KEYPAD_getPressedKey+0x66>
					#if (STANDARD_KEYPAD == FALSE)
						#if (KEYPAD_NUM_COLS == 3)
							GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
							return KEYPAD_4x3_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
						#elif (KEYPAD_NUM_COLS == 4)
							GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	69 81       	ldd	r22, Y+1	; 0x01
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
							return KEYPAD_4x4_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	98 2f       	mov	r25, r24
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	89 0f       	add	r24, r25
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <KEYPAD_4x4_adjustKeyNumber>
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
		}
	}
}
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	84 30       	cpi	r24, 0x04	; 4
    21e0:	d0 f2       	brcs	.-76     	; 0x2196 <KEYPAD_getPressedKey+0x26>
						return ((row*KEYPAD_NUM_COLS)+col+1);
					#endif /* ---> STANDARD_KEYPAD */
				}
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	69 81       	ldd	r22, Y+1	; 0x01
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
uint8 KEYPAD_getPressedKey()
{
	uint8 col,row;
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	18 f2       	brcs	.-122    	; 0x217e <KEYPAD_getPressedKey+0xe>
    21f8:	c0 cf       	rjmp	.-128    	; 0x217a <KEYPAD_getPressedKey+0xa>

000021fa <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_NUM_COLS == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2208:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number)
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	3c 83       	std	Y+4, r19	; 0x04
    2212:	2b 83       	std	Y+3, r18	; 0x03
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	88 30       	cpi	r24, 0x08	; 8
    221a:	91 05       	cpc	r25, r1
    221c:	09 f4       	brne	.+2      	; 0x2220 <KEYPAD_4x4_adjustKeyNumber+0x26>
    221e:	70 c0       	rjmp	.+224    	; 0x2300 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	29 30       	cpi	r18, 0x09	; 9
    2226:	31 05       	cpc	r19, r1
    2228:	5c f5       	brge	.+86     	; 0x2280 <KEYPAD_4x4_adjustKeyNumber+0x86>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	84 30       	cpi	r24, 0x04	; 4
    2230:	91 05       	cpc	r25, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2234:	59 c0       	rjmp	.+178    	; 0x22e8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2236:	2b 81       	ldd	r18, Y+3	; 0x03
    2238:	3c 81       	ldd	r19, Y+4	; 0x04
    223a:	25 30       	cpi	r18, 0x05	; 5
    223c:	31 05       	cpc	r19, r1
    223e:	9c f4       	brge	.+38     	; 0x2266 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	82 30       	cpi	r24, 0x02	; 2
    2246:	91 05       	cpc	r25, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <KEYPAD_4x4_adjustKeyNumber+0x52>
    224a:	48 c0       	rjmp	.+144    	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    224c:	2b 81       	ldd	r18, Y+3	; 0x03
    224e:	3c 81       	ldd	r19, Y+4	; 0x04
    2250:	23 30       	cpi	r18, 0x03	; 3
    2252:	31 05       	cpc	r19, r1
    2254:	0c f0       	brlt	.+2      	; 0x2258 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2256:	45 c0       	rjmp	.+138    	; 0x22e2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	91 05       	cpc	r25, r1
    2260:	09 f4       	brne	.+2      	; 0x2264 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2262:	39 c0       	rjmp	.+114    	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2264:	67 c0       	rjmp	.+206    	; 0x2334 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2266:	2b 81       	ldd	r18, Y+3	; 0x03
    2268:	3c 81       	ldd	r19, Y+4	; 0x04
    226a:	26 30       	cpi	r18, 0x06	; 6
    226c:	31 05       	cpc	r19, r1
    226e:	09 f4       	brne	.+2      	; 0x2272 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2270:	41 c0       	rjmp	.+130    	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	87 30       	cpi	r24, 0x07	; 7
    2278:	91 05       	cpc	r25, r1
    227a:	0c f0       	brlt	.+2      	; 0x227e <KEYPAD_4x4_adjustKeyNumber+0x84>
    227c:	3e c0       	rjmp	.+124    	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0x100>
    227e:	37 c0       	rjmp	.+110    	; 0x22ee <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2280:	2b 81       	ldd	r18, Y+3	; 0x03
    2282:	3c 81       	ldd	r19, Y+4	; 0x04
    2284:	2c 30       	cpi	r18, 0x0C	; 12
    2286:	31 05       	cpc	r19, r1
    2288:	09 f4       	brne	.+2      	; 0x228c <KEYPAD_4x4_adjustKeyNumber+0x92>
    228a:	46 c0       	rjmp	.+140    	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	8d 30       	cpi	r24, 0x0D	; 13
    2292:	91 05       	cpc	r25, r1
    2294:	5c f4       	brge	.+22     	; 0x22ac <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	2a 30       	cpi	r18, 0x0A	; 10
    229c:	31 05       	cpc	r19, r1
    229e:	b1 f1       	breq	.+108    	; 0x230c <KEYPAD_4x4_adjustKeyNumber+0x112>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	8b 30       	cpi	r24, 0x0B	; 11
    22a6:	91 05       	cpc	r25, r1
    22a8:	a4 f5       	brge	.+104    	; 0x2312 <KEYPAD_4x4_adjustKeyNumber+0x118>
    22aa:	2d c0       	rjmp	.+90     	; 0x2306 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    22ac:	2b 81       	ldd	r18, Y+3	; 0x03
    22ae:	3c 81       	ldd	r19, Y+4	; 0x04
    22b0:	2e 30       	cpi	r18, 0x0E	; 14
    22b2:	31 05       	cpc	r19, r1
    22b4:	b9 f1       	breq	.+110    	; 0x2324 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	8e 30       	cpi	r24, 0x0E	; 14
    22bc:	91 05       	cpc	r25, r1
    22be:	7c f1       	brlt	.+94     	; 0x231e <KEYPAD_4x4_adjustKeyNumber+0x124>
    22c0:	2b 81       	ldd	r18, Y+3	; 0x03
    22c2:	3c 81       	ldd	r19, Y+4	; 0x04
    22c4:	2f 30       	cpi	r18, 0x0F	; 15
    22c6:	31 05       	cpc	r19, r1
    22c8:	79 f1       	breq	.+94     	; 0x2328 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	80 31       	cpi	r24, 0x10	; 16
    22d0:	91 05       	cpc	r25, r1
    22d2:	69 f1       	breq	.+90     	; 0x232e <KEYPAD_4x4_adjustKeyNumber+0x134>
    22d4:	2f c0       	rjmp	.+94     	; 0x2334 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 7;
    22d6:	87 e0       	ldi	r24, 0x07	; 7
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	2e c0       	rjmp	.+92     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    22dc:	88 e0       	ldi	r24, 0x08	; 8
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	2b c0       	rjmp	.+86     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    22e2:	89 e0       	ldi	r24, 0x09	; 9
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	28 c0       	rjmp	.+80     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%';
    22e8:	85 e2       	ldi	r24, 0x25	; 37
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	25 c0       	rjmp	.+74     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    22ee:	84 e0       	ldi	r24, 0x04	; 4
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	22 c0       	rjmp	.+68     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    22f4:	85 e0       	ldi	r24, 0x05	; 5
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	1f c0       	rjmp	.+62     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    22fa:	86 e0       	ldi	r24, 0x06	; 6
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	1c c0       	rjmp	.+56     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*';
    2300:	8a e2       	ldi	r24, 0x2A	; 42
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	19 c0       	rjmp	.+50     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	16 c0       	rjmp	.+44     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	13 c0       	rjmp	.+38     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    2312:	83 e0       	ldi	r24, 0x03	; 3
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	10 c0       	rjmp	.+32     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-';
    2318:	8d e2       	ldi	r24, 0x2D	; 45
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	0d c0       	rjmp	.+26     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13;
    231e:	8d e0       	ldi	r24, 0x0D	; 13
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	0a c0       	rjmp	.+20     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    2324:	19 82       	std	Y+1, r1	; 0x01
    2326:	08 c0       	rjmp	.+16     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '=';
    2328:	8d e3       	ldi	r24, 0x3D	; 61
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+';
    232e:	8b e2       	ldi	r24, 0x2B	; 43
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <main>:

/*******************************************************************************
*           					Main Function                                 *
*******************************************************************************/
int main(void)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	00 d0       	rcall	.+0      	; 0x234e <main+0x6>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <main+0x8>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	/* Initialize different modules */
	KEYPAD_init();
    2354:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <KEYPAD_init>
	LCD_init();
    2358:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_init>
	UART_init(&UART_Configuration);
    235c:	8f e4       	ldi	r24, 0x4F	; 79
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	0e 94 d6 05 	call	0xbac	; 0xbac <UART_init>
	sei();
    2364:	78 94       	sei
	/* Telling MCU2 that MCU1 did the initialization stage */
	UART_sendByte(MC_Ready);
    2366:	8c ef       	ldi	r24, 0xFC	; 252
    2368:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
	/* To check if password is set in the EEPROM or not */
	uint8 PasswordState = UART_receiveByte();
    236c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
    2370:	8a 83       	std	Y+2, r24	; 0x02

	if(PasswordState != PasswordSET)
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	82 3c       	cpi	r24, 0xC2	; 194
    2376:	11 f0       	breq	.+4      	; 0x237c <main+0x34>
	{
		/* If password not set we got to set password function */
		APP_setPassword();
    2378:	0e 94 ef 11 	call	0x23de	; 0x23de <APP_setPassword>
	}

	while(1)
	{
		LCD_clearScreen();
    237c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    2380:	20 e6       	ldi	r18, 0x60	; 96
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	a9 01       	movw	r20, r18
    238a:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    238e:	2e e6       	ldi	r18, 0x6E	; 110
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	a9 01       	movw	r20, r18
    2398:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		uint8 menuKey; /* variable to decide  to open the door or change the password from the menu */
		do{
			menuKey = KEYPAD_getPressedKey();
    239c:	0e 94 b8 10 	call	0x2170	; 0x2170 <KEYPAD_getPressedKey>
    23a0:	89 83       	std	Y+1, r24	; 0x01
		}while(menuKey != '-' && menuKey != '+'); /* wait until we get '+' or '-' */
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	8d 32       	cpi	r24, 0x2D	; 45
    23a6:	19 f0       	breq	.+6      	; 0x23ae <main+0x66>
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	8b 32       	cpi	r24, 0x2B	; 43
    23ac:	b9 f7       	brne	.-18     	; 0x239c <main+0x54>
		LCD_clearScreen();
    23ae:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>

		switch(menuKey)
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	3c 83       	std	Y+4, r19	; 0x04
    23ba:	2b 83       	std	Y+3, r18	; 0x03
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	8b 32       	cpi	r24, 0x2B	; 43
    23c2:	91 05       	cpc	r25, r1
    23c4:	31 f0       	breq	.+12     	; 0x23d2 <main+0x8a>
    23c6:	2b 81       	ldd	r18, Y+3	; 0x03
    23c8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ca:	2d 32       	cpi	r18, 0x2D	; 45
    23cc:	31 05       	cpc	r19, r1
    23ce:	21 f0       	breq	.+8      	; 0x23d8 <main+0x90>
    23d0:	d5 cf       	rjmp	.-86     	; 0x237c <main+0x34>
		{
		case '+':
			APP_doorProcessing(); /* Open the door function */
    23d2:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <APP_doorProcessing>
    23d6:	d2 cf       	rjmp	.-92     	; 0x237c <main+0x34>
			break;

		case '-':
			APP_changePassword(); /* Change password function */
    23d8:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <APP_changePassword>
    23dc:	cf cf       	rjmp	.-98     	; 0x237c <main+0x34>

000023de <APP_setPassword>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void APP_setPassword()
{
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	cc 54       	subi	r28, 0x4C	; 76
    23ec:	d0 40       	sbci	r29, 0x00	; 0
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    23f8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
	LCD_displayString("Set New Password");
    23fc:	8e e7       	ldi	r24, 0x7E	; 126
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LCD_displayString>
    2404:	fe 01       	movw	r30, r28
    2406:	ed 5b       	subi	r30, 0xBD	; 189
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	aa e7       	ldi	r26, 0x7A	; 122
    2410:	b4 e4       	ldi	r27, 0x44	; 68
    2412:	80 83       	st	Z, r24
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	a2 83       	std	Z+2, r26	; 0x02
    2418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	8e 01       	movw	r16, r28
    241c:	01 5c       	subi	r16, 0xC1	; 193
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	fe 01       	movw	r30, r28
    2422:	ed 5b       	subi	r30, 0xBD	; 189
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a ef       	ldi	r20, 0xFA	; 250
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	f8 01       	movw	r30, r16
    2440:	80 83       	st	Z, r24
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	a2 83       	std	Z+2, r26	; 0x02
    2446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2448:	fe 01       	movw	r30, r28
    244a:	ff 96       	adiw	r30, 0x3f	; 63
    244c:	60 81       	ld	r22, Z
    244e:	71 81       	ldd	r23, Z+1	; 0x01
    2450:	82 81       	ldd	r24, Z+2	; 0x02
    2452:	93 81       	ldd	r25, Z+3	; 0x03
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	2c f4       	brge	.+10     	; 0x246e <APP_setPassword+0x90>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9e af       	std	Y+62, r25	; 0x3e
    246a:	8d af       	std	Y+61, r24	; 0x3d
    246c:	46 c0       	rjmp	.+140    	; 0x24fa <APP_setPassword+0x11c>
	else if (__tmp > 65535)
    246e:	fe 01       	movw	r30, r28
    2470:	ff 96       	adiw	r30, 0x3f	; 63
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	57 e4       	ldi	r21, 0x47	; 71
    2482:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2486:	18 16       	cp	r1, r24
    2488:	64 f5       	brge	.+88     	; 0x24e2 <APP_setPassword+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248a:	fe 01       	movw	r30, r28
    248c:	ed 5b       	subi	r30, 0xBD	; 189
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	60 81       	ld	r22, Z
    2492:	71 81       	ldd	r23, Z+1	; 0x01
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9e af       	std	Y+62, r25	; 0x3e
    24b6:	8d af       	std	Y+61, r24	; 0x3d
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <APP_setPassword+0xfa>
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9c af       	std	Y+60, r25	; 0x3c
    24c0:	8b af       	std	Y+59, r24	; 0x3b
    24c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    24c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <APP_setPassword+0xe8>
    24ca:	9c af       	std	Y+60, r25	; 0x3c
    24cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    24d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	9e af       	std	Y+62, r25	; 0x3e
    24d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    24da:	9e ad       	ldd	r25, Y+62	; 0x3e
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <APP_setPassword+0xdc>
    24e0:	16 c0       	rjmp	.+44     	; 0x250e <APP_setPassword+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	fe 01       	movw	r30, r28
    24e4:	ff 96       	adiw	r30, 0x3f	; 63
    24e6:	60 81       	ld	r22, Z
    24e8:	71 81       	ldd	r23, Z+1	; 0x01
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9e af       	std	Y+62, r25	; 0x3e
    24f8:	8d af       	std	Y+61, r24	; 0x3d
    24fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    24fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    24fe:	9a af       	std	Y+58, r25	; 0x3a
    2500:	89 af       	std	Y+57, r24	; 0x39
    2502:	89 ad       	ldd	r24, Y+57	; 0x39
    2504:	9a ad       	ldd	r25, Y+58	; 0x3a
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <APP_setPassword+0x128>
    250a:	9a af       	std	Y+58, r25	; 0x3a
    250c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	LCD_clearScreen();
    250e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
	UART_sendByte(MSG_UpdatePassword); /* Inform MCU2 that it will receive new password to set it in the eeprom */
    2512:	89 e9       	ldi	r24, 0x99	; 153
    2514:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
	do
	{
		PasswordMatchFlag = TRUE ;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	80 93 70 01 	sts	0x0170, r24
		LCD_displayStringRowColumn(0, 0, "Plz Enter Pass");
    251e:	2f e8       	ldi	r18, 0x8F	; 143
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	a9 01       	movw	r20, r18
    2528:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <LCD_moveCursor>
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++) /* get the password from the user and save it into Password[] array */
    2534:	fe 01       	movw	r30, r28
    2536:	e4 5b       	subi	r30, 0xB4	; 180
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	10 82       	st	Z, r1
    253c:	a2 c0       	rjmp	.+324    	; 0x2682 <APP_setPassword+0x2a4>
		{
			uint8 key = KEYPAD_getPressedKey();
    253e:	0e 94 b8 10 	call	0x2170	; 0x2170 <KEYPAD_getPressedKey>
    2542:	fe 01       	movw	r30, r28
    2544:	e5 5b       	subi	r30, 0xB5	; 181
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 83       	st	Z, r24
			if(key <= 9 && key >= 0)
    254a:	fe 01       	movw	r30, r28
    254c:	e5 5b       	subi	r30, 0xB5	; 181
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	8a 30       	cpi	r24, 0x0A	; 10
    2554:	90 f4       	brcc	.+36     	; 0x257a <APP_setPassword+0x19c>
			{
				Password[i] = key;
    2556:	fe 01       	movw	r30, r28
    2558:	e4 5b       	subi	r30, 0xB4	; 180
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	88 2f       	mov	r24, r24
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	dc 01       	movw	r26, r24
    2564:	af 58       	subi	r26, 0x8F	; 143
    2566:	be 4f       	sbci	r27, 0xFE	; 254
    2568:	fe 01       	movw	r30, r28
    256a:	e5 5b       	subi	r30, 0xB5	; 181
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
    2572:	8a e2       	ldi	r24, 0x2A	; 42
    2574:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
    2578:	09 c0       	rjmp	.+18     	; 0x258c <APP_setPassword+0x1ae>
			}
			else /* in case the user pressed a key that is not allowed */
			{
				i--; /* don't count this key and go back again */
    257a:	de 01       	movw	r26, r28
    257c:	a4 5b       	subi	r26, 0xB4	; 180
    257e:	bf 4f       	sbci	r27, 0xFF	; 255
    2580:	fe 01       	movw	r30, r28
    2582:	e4 5b       	subi	r30, 0xB4	; 180
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	81 50       	subi	r24, 0x01	; 1
    258a:	8c 93       	st	X, r24
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	aa ef       	ldi	r26, 0xFA	; 250
    2592:	b3 e4       	ldi	r27, 0x43	; 67
    2594:	8d ab       	std	Y+53, r24	; 0x35
    2596:	9e ab       	std	Y+54, r25	; 0x36
    2598:	af ab       	std	Y+55, r26	; 0x37
    259a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259c:	6d a9       	ldd	r22, Y+53	; 0x35
    259e:	7e a9       	ldd	r23, Y+54	; 0x36
    25a0:	8f a9       	ldd	r24, Y+55	; 0x37
    25a2:	98 ad       	ldd	r25, Y+56	; 0x38
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a ef       	ldi	r20, 0xFA	; 250
    25aa:	54 e4       	ldi	r21, 0x44	; 68
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	89 ab       	std	Y+49, r24	; 0x31
    25b6:	9a ab       	std	Y+50, r25	; 0x32
    25b8:	ab ab       	std	Y+51, r26	; 0x33
    25ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25bc:	69 a9       	ldd	r22, Y+49	; 0x31
    25be:	7a a9       	ldd	r23, Y+50	; 0x32
    25c0:	8b a9       	ldd	r24, Y+51	; 0x33
    25c2:	9c a9       	ldd	r25, Y+52	; 0x34
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <APP_setPassword+0x200>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	98 ab       	std	Y+48, r25	; 0x30
    25da:	8f a7       	std	Y+47, r24	; 0x2f
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <APP_setPassword+0x27e>
	else if (__tmp > 65535)
    25de:	69 a9       	ldd	r22, Y+49	; 0x31
    25e0:	7a a9       	ldd	r23, Y+50	; 0x32
    25e2:	8b a9       	ldd	r24, Y+51	; 0x33
    25e4:	9c a9       	ldd	r25, Y+52	; 0x34
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	4c f5       	brge	.+82     	; 0x2648 <APP_setPassword+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f6:	6d a9       	ldd	r22, Y+53	; 0x35
    25f8:	7e a9       	ldd	r23, Y+54	; 0x36
    25fa:	8f a9       	ldd	r24, Y+55	; 0x37
    25fc:	98 ad       	ldd	r25, Y+56	; 0x38
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	98 ab       	std	Y+48, r25	; 0x30
    261c:	8f a7       	std	Y+47, r24	; 0x2f
    261e:	0f c0       	rjmp	.+30     	; 0x263e <APP_setPassword+0x260>
    2620:	88 ec       	ldi	r24, 0xC8	; 200
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9e a7       	std	Y+46, r25	; 0x2e
    2626:	8d a7       	std	Y+45, r24	; 0x2d
    2628:	8d a5       	ldd	r24, Y+45	; 0x2d
    262a:	9e a5       	ldd	r25, Y+46	; 0x2e
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <APP_setPassword+0x24e>
    2630:	9e a7       	std	Y+46, r25	; 0x2e
    2632:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	8f a5       	ldd	r24, Y+47	; 0x2f
    2636:	98 a9       	ldd	r25, Y+48	; 0x30
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	98 ab       	std	Y+48, r25	; 0x30
    263c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2640:	98 a9       	ldd	r25, Y+48	; 0x30
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	69 f7       	brne	.-38     	; 0x2620 <APP_setPassword+0x242>
    2646:	14 c0       	rjmp	.+40     	; 0x2670 <APP_setPassword+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2648:	69 a9       	ldd	r22, Y+49	; 0x31
    264a:	7a a9       	ldd	r23, Y+50	; 0x32
    264c:	8b a9       	ldd	r24, Y+51	; 0x33
    264e:	9c a9       	ldd	r25, Y+52	; 0x34
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	98 ab       	std	Y+48, r25	; 0x30
    265a:	8f a7       	std	Y+47, r24	; 0x2f
    265c:	8f a5       	ldd	r24, Y+47	; 0x2f
    265e:	98 a9       	ldd	r25, Y+48	; 0x30
    2660:	9c a7       	std	Y+44, r25	; 0x2c
    2662:	8b a7       	std	Y+43, r24	; 0x2b
    2664:	8b a5       	ldd	r24, Y+43	; 0x2b
    2666:	9c a5       	ldd	r25, Y+44	; 0x2c
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <APP_setPassword+0x28a>
    266c:	9c a7       	std	Y+44, r25	; 0x2c
    266e:	8b a7       	std	Y+43, r24	; 0x2b
	do
	{
		PasswordMatchFlag = TRUE ;
		LCD_displayStringRowColumn(0, 0, "Plz Enter Pass");
		LCD_moveCursor(1, 0);
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++) /* get the password from the user and save it into Password[] array */
    2670:	de 01       	movw	r26, r28
    2672:	a4 5b       	subi	r26, 0xB4	; 180
    2674:	bf 4f       	sbci	r27, 0xFF	; 255
    2676:	fe 01       	movw	r30, r28
    2678:	e4 5b       	subi	r30, 0xB4	; 180
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	8c 93       	st	X, r24
    2682:	fe 01       	movw	r30, r28
    2684:	e4 5b       	subi	r30, 0xB4	; 180
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	85 30       	cpi	r24, 0x05	; 5
    268c:	08 f4       	brcc	.+2      	; 0x2690 <APP_setPassword+0x2b2>
    268e:	57 cf       	rjmp	.-338    	; 0x253e <APP_setPassword+0x160>
			{
				i--; /* don't count this key and go back again */
			}
			_delay_ms(KEYPAD_BUTTON_DELAY); /* wait for a certain delay before getting another input */
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY){} /* wait tell the user press Enter key on the keypad */
    2690:	0e 94 b8 10 	call	0x2170	; 0x2170 <KEYPAD_getPressedKey>
    2694:	8d 30       	cpi	r24, 0x0D	; 13
    2696:	e1 f7       	brne	.-8      	; 0x2690 <APP_setPassword+0x2b2>


		LCD_clearScreen();
    2698:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Plz Re-Enter the");
    269c:	2e e9       	ldi	r18, 0x9E	; 158
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	a9 01       	movw	r20, r18
    26a6:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Same Pass: ");
    26aa:	2f ea       	ldi	r18, 0xAF	; 175
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	60 e0       	ldi	r22, 0x00	; 0
    26b2:	a9 01       	movw	r20, r18
    26b4:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++) /* get the password again from the user and save it into Password2[] array */
    26b8:	fe 01       	movw	r30, r28
    26ba:	e6 5b       	subi	r30, 0xB6	; 182
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	10 82       	st	Z, r1
    26c0:	a2 c0       	rjmp	.+324    	; 0x2806 <APP_setPassword+0x428>
		{
			uint8 key = KEYPAD_getPressedKey();
    26c2:	0e 94 b8 10 	call	0x2170	; 0x2170 <KEYPAD_getPressedKey>
    26c6:	fe 01       	movw	r30, r28
    26c8:	e7 5b       	subi	r30, 0xB7	; 183
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 83       	st	Z, r24
			if(key <= 9 && key >= 0)
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 5b       	subi	r30, 0xB7	; 183
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	8a 30       	cpi	r24, 0x0A	; 10
    26d8:	90 f4       	brcc	.+36     	; 0x26fe <APP_setPassword+0x320>
			{
				Password2[i] = key;
    26da:	fe 01       	movw	r30, r28
    26dc:	e6 5b       	subi	r30, 0xB6	; 182
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	dc 01       	movw	r26, r24
    26e8:	a5 59       	subi	r26, 0x95	; 149
    26ea:	be 4f       	sbci	r27, 0xFE	; 254
    26ec:	fe 01       	movw	r30, r28
    26ee:	e7 5b       	subi	r30, 0xB7	; 183
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
    26f6:	8a e2       	ldi	r24, 0x2A	; 42
    26f8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
    26fc:	09 c0       	rjmp	.+18     	; 0x2710 <APP_setPassword+0x332>
			}
			else
			{
				i--;
    26fe:	de 01       	movw	r26, r28
    2700:	a6 5b       	subi	r26, 0xB6	; 182
    2702:	bf 4f       	sbci	r27, 0xFF	; 255
    2704:	fe 01       	movw	r30, r28
    2706:	e6 5b       	subi	r30, 0xB6	; 182
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 81       	ld	r24, Z
    270c:	81 50       	subi	r24, 0x01	; 1
    270e:	8c 93       	st	X, r24
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	aa ef       	ldi	r26, 0xFA	; 250
    2716:	b3 e4       	ldi	r27, 0x43	; 67
    2718:	8f a3       	std	Y+39, r24	; 0x27
    271a:	98 a7       	std	Y+40, r25	; 0x28
    271c:	a9 a7       	std	Y+41, r26	; 0x29
    271e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	6f a1       	ldd	r22, Y+39	; 0x27
    2722:	78 a5       	ldd	r23, Y+40	; 0x28
    2724:	89 a5       	ldd	r24, Y+41	; 0x29
    2726:	9a a5       	ldd	r25, Y+42	; 0x2a
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8b a3       	std	Y+35, r24	; 0x23
    273a:	9c a3       	std	Y+36, r25	; 0x24
    273c:	ad a3       	std	Y+37, r26	; 0x25
    273e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2740:	6b a1       	ldd	r22, Y+35	; 0x23
    2742:	7c a1       	ldd	r23, Y+36	; 0x24
    2744:	8d a1       	ldd	r24, Y+37	; 0x25
    2746:	9e a1       	ldd	r25, Y+38	; 0x26
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <APP_setPassword+0x384>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9a a3       	std	Y+34, r25	; 0x22
    275e:	89 a3       	std	Y+33, r24	; 0x21
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <APP_setPassword+0x402>
	else if (__tmp > 65535)
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <APP_setPassword+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	6f a1       	ldd	r22, Y+39	; 0x27
    277c:	78 a5       	ldd	r23, Y+40	; 0x28
    277e:	89 a5       	ldd	r24, Y+41	; 0x29
    2780:	9a a5       	ldd	r25, Y+42	; 0x2a
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9a a3       	std	Y+34, r25	; 0x22
    27a0:	89 a3       	std	Y+33, r24	; 0x21
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <APP_setPassword+0x3e4>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	98 a3       	std	Y+32, r25	; 0x20
    27aa:	8f 8f       	std	Y+31, r24	; 0x1f
    27ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27ae:	98 a1       	ldd	r25, Y+32	; 0x20
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <APP_setPassword+0x3d2>
    27b4:	98 a3       	std	Y+32, r25	; 0x20
    27b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ba:	9a a1       	ldd	r25, Y+34	; 0x22
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9a a3       	std	Y+34, r25	; 0x22
    27c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	89 a1       	ldd	r24, Y+33	; 0x21
    27c4:	9a a1       	ldd	r25, Y+34	; 0x22
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <APP_setPassword+0x3c6>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <APP_setPassword+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6b a1       	ldd	r22, Y+35	; 0x23
    27ce:	7c a1       	ldd	r23, Y+36	; 0x24
    27d0:	8d a1       	ldd	r24, Y+37	; 0x25
    27d2:	9e a1       	ldd	r25, Y+38	; 0x26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9a a3       	std	Y+34, r25	; 0x22
    27de:	89 a3       	std	Y+33, r24	; 0x21
    27e0:	89 a1       	ldd	r24, Y+33	; 0x21
    27e2:	9a a1       	ldd	r25, Y+34	; 0x22
    27e4:	9e 8f       	std	Y+30, r25	; 0x1e
    27e6:	8d 8f       	std	Y+29, r24	; 0x1d
    27e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <APP_setPassword+0x40e>
    27f0:	9e 8f       	std	Y+30, r25	; 0x1e
    27f2:	8d 8f       	std	Y+29, r24	; 0x1d


		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Plz Re-Enter the");
		LCD_displayStringRowColumn(1, 0, "Same Pass: ");
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++) /* get the password again from the user and save it into Password2[] array */
    27f4:	de 01       	movw	r26, r28
    27f6:	a6 5b       	subi	r26, 0xB6	; 182
    27f8:	bf 4f       	sbci	r27, 0xFF	; 255
    27fa:	fe 01       	movw	r30, r28
    27fc:	e6 5b       	subi	r30, 0xB6	; 182
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 81       	ld	r24, Z
    2802:	8f 5f       	subi	r24, 0xFF	; 255
    2804:	8c 93       	st	X, r24
    2806:	fe 01       	movw	r30, r28
    2808:	e6 5b       	subi	r30, 0xB6	; 182
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	85 30       	cpi	r24, 0x05	; 5
    2810:	08 f4       	brcc	.+2      	; 0x2814 <APP_setPassword+0x436>
    2812:	57 cf       	rjmp	.-338    	; 0x26c2 <APP_setPassword+0x2e4>
			{
				i--;
			}
			_delay_ms(KEYPAD_BUTTON_DELAY);
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY){}
    2814:	0e 94 b8 10 	call	0x2170	; 0x2170 <KEYPAD_getPressedKey>
    2818:	8d 30       	cpi	r24, 0x0D	; 13
    281a:	e1 f7       	brne	.-8      	; 0x2814 <APP_setPassword+0x436>


		for(uint8 j = 0 ; j < PASSWORD_SIZE	; j++) /* Compare between the two passwords to see if they match or not */
    281c:	fe 01       	movw	r30, r28
    281e:	e8 5b       	subi	r30, 0xB8	; 184
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	10 82       	st	Z, r1
    2824:	22 c0       	rjmp	.+68     	; 0x286a <APP_setPassword+0x48c>
		{
			if(Password[j] != Password2[j])
    2826:	fe 01       	movw	r30, r28
    2828:	e8 5b       	subi	r30, 0xB8	; 184
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	88 2f       	mov	r24, r24
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	fc 01       	movw	r30, r24
    2834:	ef 58       	subi	r30, 0x8F	; 143
    2836:	fe 4f       	sbci	r31, 0xFE	; 254
    2838:	20 81       	ld	r18, Z
    283a:	fe 01       	movw	r30, r28
    283c:	e8 5b       	subi	r30, 0xB8	; 184
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	88 2f       	mov	r24, r24
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	fc 01       	movw	r30, r24
    2848:	e5 59       	subi	r30, 0x95	; 149
    284a:	fe 4f       	sbci	r31, 0xFE	; 254
    284c:	80 81       	ld	r24, Z
    284e:	28 17       	cp	r18, r24
    2850:	19 f0       	breq	.+6      	; 0x2858 <APP_setPassword+0x47a>
			{
				PasswordMatchFlag = 0;
    2852:	10 92 70 01 	sts	0x0170, r1
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <APP_setPassword+0x498>
			_delay_ms(KEYPAD_BUTTON_DELAY);
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY){}


		for(uint8 j = 0 ; j < PASSWORD_SIZE	; j++) /* Compare between the two passwords to see if they match or not */
    2858:	de 01       	movw	r26, r28
    285a:	a8 5b       	subi	r26, 0xB8	; 184
    285c:	bf 4f       	sbci	r27, 0xFF	; 255
    285e:	fe 01       	movw	r30, r28
    2860:	e8 5b       	subi	r30, 0xB8	; 184
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	8f 5f       	subi	r24, 0xFF	; 255
    2868:	8c 93       	st	X, r24
    286a:	fe 01       	movw	r30, r28
    286c:	e8 5b       	subi	r30, 0xB8	; 184
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	80 81       	ld	r24, Z
    2872:	85 30       	cpi	r24, 0x05	; 5
    2874:	c0 f2       	brcs	.-80     	; 0x2826 <APP_setPassword+0x448>
			{
				PasswordMatchFlag = 0;
				break;
			}
		}
		LCD_clearScreen();
    2876:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		if(PasswordMatchFlag == TRUE) /* if they match then change the password */
    287a:	80 91 70 01 	lds	r24, 0x0170
    287e:	81 30       	cpi	r24, 0x01	; 1
    2880:	09 f0       	breq	.+2      	; 0x2884 <APP_setPassword+0x4a6>
    2882:	a2 c0       	rjmp	.+324    	; 0x29c8 <APP_setPassword+0x5ea>
		{
			LCD_displayStringRowColumn(0, 4, "Matched");
    2884:	2b eb       	ldi	r18, 0xBB	; 187
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	64 e0       	ldi	r22, 0x04	; 4
    288c:	a9 01       	movw	r20, r18
    288e:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Password Updated");
    2892:	23 ec       	ldi	r18, 0xC3	; 195
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	a9 01       	movw	r20, r18
    289c:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			for(uint8 k = 0 ; k < PASSWORD_SIZE ; k++)
    28a0:	fe 01       	movw	r30, r28
    28a2:	e9 5b       	subi	r30, 0xB9	; 185
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	10 82       	st	Z, r1
    28a8:	87 c0       	rjmp	.+270    	; 0x29b8 <APP_setPassword+0x5da>
			{
				UART_sendByte(Password[k]); /* as MCU2 already on MSG_UpdatePassword state and it is waiting for the new password to be sent */
    28aa:	fe 01       	movw	r30, r28
    28ac:	e9 5b       	subi	r30, 0xB9	; 185
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	80 81       	ld	r24, Z
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	fc 01       	movw	r30, r24
    28b8:	ef 58       	subi	r30, 0x8F	; 143
    28ba:	fe 4f       	sbci	r31, 0xFE	; 254
    28bc:	80 81       	ld	r24, Z
    28be:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	a8 e4       	ldi	r26, 0x48	; 72
    28c8:	b2 e4       	ldi	r27, 0x42	; 66
    28ca:	89 8f       	std	Y+25, r24	; 0x19
    28cc:	9a 8f       	std	Y+26, r25	; 0x1a
    28ce:	ab 8f       	std	Y+27, r26	; 0x1b
    28d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d2:	69 8d       	ldd	r22, Y+25	; 0x19
    28d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	4a ef       	ldi	r20, 0xFA	; 250
    28e0:	54 e4       	ldi	r21, 0x44	; 68
    28e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	8d 8b       	std	Y+21, r24	; 0x15
    28ec:	9e 8b       	std	Y+22, r25	; 0x16
    28ee:	af 8b       	std	Y+23, r26	; 0x17
    28f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28f2:	6d 89       	ldd	r22, Y+21	; 0x15
    28f4:	7e 89       	ldd	r23, Y+22	; 0x16
    28f6:	8f 89       	ldd	r24, Y+23	; 0x17
    28f8:	98 8d       	ldd	r25, Y+24	; 0x18
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e8       	ldi	r20, 0x80	; 128
    2900:	5f e3       	ldi	r21, 0x3F	; 63
    2902:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2906:	88 23       	and	r24, r24
    2908:	2c f4       	brge	.+10     	; 0x2914 <APP_setPassword+0x536>
		__ticks = 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c 8b       	std	Y+20, r25	; 0x14
    2910:	8b 8b       	std	Y+19, r24	; 0x13
    2912:	3f c0       	rjmp	.+126    	; 0x2992 <APP_setPassword+0x5b4>
	else if (__tmp > 65535)
    2914:	6d 89       	ldd	r22, Y+21	; 0x15
    2916:	7e 89       	ldd	r23, Y+22	; 0x16
    2918:	8f 89       	ldd	r24, Y+23	; 0x17
    291a:	98 8d       	ldd	r25, Y+24	; 0x18
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	57 e4       	ldi	r21, 0x47	; 71
    2924:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2928:	18 16       	cp	r1, r24
    292a:	4c f5       	brge	.+82     	; 0x297e <APP_setPassword+0x5a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292c:	69 8d       	ldd	r22, Y+25	; 0x19
    292e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2930:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2932:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e2       	ldi	r20, 0x20	; 32
    293a:	51 e4       	ldi	r21, 0x41	; 65
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9c 8b       	std	Y+20, r25	; 0x14
    2952:	8b 8b       	std	Y+19, r24	; 0x13
    2954:	0f c0       	rjmp	.+30     	; 0x2974 <APP_setPassword+0x596>
    2956:	88 ec       	ldi	r24, 0xC8	; 200
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9a 8b       	std	Y+18, r25	; 0x12
    295c:	89 8b       	std	Y+17, r24	; 0x11
    295e:	89 89       	ldd	r24, Y+17	; 0x11
    2960:	9a 89       	ldd	r25, Y+18	; 0x12
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <APP_setPassword+0x584>
    2966:	9a 8b       	std	Y+18, r25	; 0x12
    2968:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296a:	8b 89       	ldd	r24, Y+19	; 0x13
    296c:	9c 89       	ldd	r25, Y+20	; 0x14
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	9c 8b       	std	Y+20, r25	; 0x14
    2972:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2974:	8b 89       	ldd	r24, Y+19	; 0x13
    2976:	9c 89       	ldd	r25, Y+20	; 0x14
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	69 f7       	brne	.-38     	; 0x2956 <APP_setPassword+0x578>
    297c:	14 c0       	rjmp	.+40     	; 0x29a6 <APP_setPassword+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297e:	6d 89       	ldd	r22, Y+21	; 0x15
    2980:	7e 89       	ldd	r23, Y+22	; 0x16
    2982:	8f 89       	ldd	r24, Y+23	; 0x17
    2984:	98 8d       	ldd	r25, Y+24	; 0x18
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	9c 8b       	std	Y+20, r25	; 0x14
    2990:	8b 8b       	std	Y+19, r24	; 0x13
    2992:	8b 89       	ldd	r24, Y+19	; 0x13
    2994:	9c 89       	ldd	r25, Y+20	; 0x14
    2996:	98 8b       	std	Y+16, r25	; 0x10
    2998:	8f 87       	std	Y+15, r24	; 0x0f
    299a:	8f 85       	ldd	r24, Y+15	; 0x0f
    299c:	98 89       	ldd	r25, Y+16	; 0x10
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <APP_setPassword+0x5c0>
    29a2:	98 8b       	std	Y+16, r25	; 0x10
    29a4:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_clearScreen();
		if(PasswordMatchFlag == TRUE) /* if they match then change the password */
		{
			LCD_displayStringRowColumn(0, 4, "Matched");
			LCD_displayStringRowColumn(1, 0, "Password Updated");
			for(uint8 k = 0 ; k < PASSWORD_SIZE ; k++)
    29a6:	de 01       	movw	r26, r28
    29a8:	a9 5b       	subi	r26, 0xB9	; 185
    29aa:	bf 4f       	sbci	r27, 0xFF	; 255
    29ac:	fe 01       	movw	r30, r28
    29ae:	e9 5b       	subi	r30, 0xB9	; 185
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	8f 5f       	subi	r24, 0xFF	; 255
    29b6:	8c 93       	st	X, r24
    29b8:	fe 01       	movw	r30, r28
    29ba:	e9 5b       	subi	r30, 0xB9	; 185
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	85 30       	cpi	r24, 0x05	; 5
    29c2:	08 f4       	brcc	.+2      	; 0x29c6 <APP_setPassword+0x5e8>
    29c4:	72 cf       	rjmp	.-284    	; 0x28aa <APP_setPassword+0x4cc>
    29c6:	07 c0       	rjmp	.+14     	; 0x29d6 <APP_setPassword+0x5f8>
				_delay_ms(50);
			}
		}
		else /* if they are not display UnMatched on the LCD */
		{
			LCD_displayStringRowColumn(0, 0, "UnMatched");
    29c8:	24 ed       	ldi	r18, 0xD4	; 212
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	a9 01       	movw	r20, r18
    29d2:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	aa e7       	ldi	r26, 0x7A	; 122
    29dc:	b4 e4       	ldi	r27, 0x44	; 68
    29de:	8b 87       	std	Y+11, r24	; 0x0b
    29e0:	9c 87       	std	Y+12, r25	; 0x0c
    29e2:	ad 87       	std	Y+13, r26	; 0x0d
    29e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	4a ef       	ldi	r20, 0xFA	; 250
    29f4:	54 e4       	ldi	r21, 0x44	; 68
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	8f 83       	std	Y+7, r24	; 0x07
    2a00:	98 87       	std	Y+8, r25	; 0x08
    2a02:	a9 87       	std	Y+9, r26	; 0x09
    2a04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a06:	6f 81       	ldd	r22, Y+7	; 0x07
    2a08:	78 85       	ldd	r23, Y+8	; 0x08
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e8       	ldi	r20, 0x80	; 128
    2a14:	5f e3       	ldi	r21, 0x3F	; 63
    2a16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a1a:	88 23       	and	r24, r24
    2a1c:	2c f4       	brge	.+10     	; 0x2a28 <APP_setPassword+0x64a>
		__ticks = 1;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
    2a26:	3f c0       	rjmp	.+126    	; 0x2aa6 <APP_setPassword+0x6c8>
	else if (__tmp > 65535)
    2a28:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2a:	78 85       	ldd	r23, Y+8	; 0x08
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	3f ef       	ldi	r19, 0xFF	; 255
    2a34:	4f e7       	ldi	r20, 0x7F	; 127
    2a36:	57 e4       	ldi	r21, 0x47	; 71
    2a38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a3c:	18 16       	cp	r1, r24
    2a3e:	4c f5       	brge	.+82     	; 0x2a92 <APP_setPassword+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e2       	ldi	r20, 0x20	; 32
    2a4e:	51 e4       	ldi	r21, 0x41	; 65
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	bc 01       	movw	r22, r24
    2a5a:	cd 01       	movw	r24, r26
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	0f c0       	rjmp	.+30     	; 0x2a88 <APP_setPassword+0x6aa>
    2a6a:	88 ec       	ldi	r24, 0xC8	; 200
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	9c 83       	std	Y+4, r25	; 0x04
    2a70:	8b 83       	std	Y+3, r24	; 0x03
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <APP_setPassword+0x698>
    2a7a:	9c 83       	std	Y+4, r25	; 0x04
    2a7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	69 f7       	brne	.-38     	; 0x2a6a <APP_setPassword+0x68c>
    2a90:	14 c0       	rjmp	.+40     	; 0x2aba <APP_setPassword+0x6dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a92:	6f 81       	ldd	r22, Y+7	; 0x07
    2a94:	78 85       	ldd	r23, Y+8	; 0x08
    2a96:	89 85       	ldd	r24, Y+9	; 0x09
    2a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9e 83       	std	Y+6, r25	; 0x06
    2aa4:	8d 83       	std	Y+5, r24	; 0x05
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <APP_setPassword+0x6d4>
    2ab6:	9a 83       	std	Y+2, r25	; 0x02
    2ab8:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(1000);
		LCD_clearScreen();
    2aba:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>

	}while(PasswordMatchFlag == FALSE); /* Restart the whole process until the user enters two match passwords */
    2abe:	80 91 70 01 	lds	r24, 0x0170
    2ac2:	88 23       	and	r24, r24
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <APP_setPassword+0x6ea>
    2ac6:	28 cd       	rjmp	.-1456   	; 0x2518 <APP_setPassword+0x13a>
}
    2ac8:	c4 5b       	subi	r28, 0xB4	; 180
    2aca:	df 4f       	sbci	r29, 0xFF	; 255
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	08 95       	ret

00002ae0 <APP_changePassword>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void APP_changePassword()
{
    2ae0:	df 93       	push	r29
    2ae2:	cf 93       	push	r28
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	ad 97       	sbiw	r28, 0x2d	; 45
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
	Lives = ALLOWED_TRIES; /* Number of Tries Allowed */
    2af4:	83 e0       	ldi	r24, 0x03	; 3
    2af6:	80 93 5e 01 	sts	0x015E, r24
	do
	{
		PasswordMatchFlag = TRUE;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	80 93 70 01 	sts	0x0170, r24
		LCD_clearScreen();
    2b00:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Plz Enter old");
    2b04:	2e ed       	ldi	r18, 0xDE	; 222
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	a9 01       	movw	r20, r18
    2b0e:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Password: ");
    2b12:	2c ee       	ldi	r18, 0xEC	; 236
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	a9 01       	movw	r20, r18
    2b1c:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++) /* Getting the password from the user */
    2b20:	1d a6       	std	Y+45, r1	; 0x2d
    2b22:	8a c0       	rjmp	.+276    	; 0x2c38 <APP_changePassword+0x158>
		{
			uint8 key = KEYPAD_getPressedKey();
    2b24:	0e 94 b8 10 	call	0x2170	; 0x2170 <KEYPAD_getPressedKey>
    2b28:	8c a7       	std	Y+44, r24	; 0x2c
			if(key <= 9 && key >= 0)
    2b2a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b2c:	8a 30       	cpi	r24, 0x0A	; 10
    2b2e:	60 f4       	brcc	.+24     	; 0x2b48 <APP_changePassword+0x68>
			{
				Password2[i] = key;
    2b30:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	fc 01       	movw	r30, r24
    2b38:	e5 59       	subi	r30, 0x95	; 149
    2b3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b3c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b3e:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    2b40:	8a e2       	ldi	r24, 0x2A	; 42
    2b42:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
    2b46:	03 c0       	rjmp	.+6      	; 0x2b4e <APP_changePassword+0x6e>
			}
			else /* in case the user pressed a key that is not allowed */
			{
				i--; /* don't count this key and go back again */
    2b48:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b4a:	81 50       	subi	r24, 0x01	; 1
    2b4c:	8d a7       	std	Y+45, r24	; 0x2d
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	aa ef       	ldi	r26, 0xFA	; 250
    2b54:	b3 e4       	ldi	r27, 0x43	; 67
    2b56:	8f a3       	std	Y+39, r24	; 0x27
    2b58:	98 a7       	std	Y+40, r25	; 0x28
    2b5a:	a9 a7       	std	Y+41, r26	; 0x29
    2b5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b60:	78 a5       	ldd	r23, Y+40	; 0x28
    2b62:	89 a5       	ldd	r24, Y+41	; 0x29
    2b64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	4a ef       	ldi	r20, 0xFA	; 250
    2b6c:	54 e4       	ldi	r21, 0x44	; 68
    2b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	8b a3       	std	Y+35, r24	; 0x23
    2b78:	9c a3       	std	Y+36, r25	; 0x24
    2b7a:	ad a3       	std	Y+37, r26	; 0x25
    2b7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b80:	7c a1       	ldd	r23, Y+36	; 0x24
    2b82:	8d a1       	ldd	r24, Y+37	; 0x25
    2b84:	9e a1       	ldd	r25, Y+38	; 0x26
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e8       	ldi	r20, 0x80	; 128
    2b8c:	5f e3       	ldi	r21, 0x3F	; 63
    2b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b92:	88 23       	and	r24, r24
    2b94:	2c f4       	brge	.+10     	; 0x2ba0 <APP_changePassword+0xc0>
		__ticks = 1;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9a a3       	std	Y+34, r25	; 0x22
    2b9c:	89 a3       	std	Y+33, r24	; 0x21
    2b9e:	3f c0       	rjmp	.+126    	; 0x2c1e <APP_changePassword+0x13e>
	else if (__tmp > 65535)
    2ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	3f ef       	ldi	r19, 0xFF	; 255
    2bac:	4f e7       	ldi	r20, 0x7F	; 127
    2bae:	57 e4       	ldi	r21, 0x47	; 71
    2bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb4:	18 16       	cp	r1, r24
    2bb6:	4c f5       	brge	.+82     	; 0x2c0a <APP_changePassword+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bba:	78 a5       	ldd	r23, Y+40	; 0x28
    2bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e2       	ldi	r20, 0x20	; 32
    2bc6:	51 e4       	ldi	r21, 0x41	; 65
    2bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	9a a3       	std	Y+34, r25	; 0x22
    2bde:	89 a3       	std	Y+33, r24	; 0x21
    2be0:	0f c0       	rjmp	.+30     	; 0x2c00 <APP_changePassword+0x120>
    2be2:	88 ec       	ldi	r24, 0xC8	; 200
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	98 a3       	std	Y+32, r25	; 0x20
    2be8:	8f 8f       	std	Y+31, r24	; 0x1f
    2bea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bec:	98 a1       	ldd	r25, Y+32	; 0x20
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <APP_changePassword+0x10e>
    2bf2:	98 a3       	std	Y+32, r25	; 0x20
    2bf4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	9a a3       	std	Y+34, r25	; 0x22
    2bfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c00:	89 a1       	ldd	r24, Y+33	; 0x21
    2c02:	9a a1       	ldd	r25, Y+34	; 0x22
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	69 f7       	brne	.-38     	; 0x2be2 <APP_changePassword+0x102>
    2c08:	14 c0       	rjmp	.+40     	; 0x2c32 <APP_changePassword+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c10:	9e a1       	ldd	r25, Y+38	; 0x26
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	9a a3       	std	Y+34, r25	; 0x22
    2c1c:	89 a3       	std	Y+33, r24	; 0x21
    2c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c20:	9a a1       	ldd	r25, Y+34	; 0x22
    2c22:	9e 8f       	std	Y+30, r25	; 0x1e
    2c24:	8d 8f       	std	Y+29, r24	; 0x1d
    2c26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <APP_changePassword+0x14a>
    2c2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c30:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		PasswordMatchFlag = TRUE;
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Plz Enter old");
		LCD_displayStringRowColumn(1, 0, "Password: ");
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++) /* Getting the password from the user */
    2c32:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c34:	8f 5f       	subi	r24, 0xFF	; 255
    2c36:	8d a7       	std	Y+45, r24	; 0x2d
    2c38:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c3a:	85 30       	cpi	r24, 0x05	; 5
    2c3c:	08 f4       	brcc	.+2      	; 0x2c40 <APP_changePassword+0x160>
    2c3e:	72 cf       	rjmp	.-284    	; 0x2b24 <APP_changePassword+0x44>
			{
				i--; /* don't count this key and go back again */
			}
			_delay_ms(KEYPAD_BUTTON_DELAY); /* wait for certain time before pressing another button */
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY){} /* wait the user to hit enter "ON/C" */
    2c40:	0e 94 b8 10 	call	0x2170	; 0x2170 <KEYPAD_getPressedKey>
    2c44:	8d 30       	cpi	r24, 0x0D	; 13
    2c46:	e1 f7       	brne	.-8      	; 0x2c40 <APP_changePassword+0x160>

		UART_sendByte(MSG_checkPassword);  /* Telling MCU2 that MCU1 want to check if the password match the one in the EEPROM */
    2c48:	87 e7       	ldi	r24, 0x77	; 119
    2c4a:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>

		for(uint8 j = 0 ; j < PASSWORD_SIZE	; j++) /* send the claimed password */
    2c4e:	1b a6       	std	Y+43, r1	; 0x2b
    2c50:	10 c0       	rjmp	.+32     	; 0x2c72 <APP_changePassword+0x192>
		{
			UART_sendByte(Password2[j]);
    2c52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c54:	88 2f       	mov	r24, r24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	fc 01       	movw	r30, r24
    2c5a:	e5 59       	subi	r30, 0x95	; 149
    2c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5e:	80 81       	ld	r24, Z
    2c60:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
			while(UART_receiveByte() != MC_Ready);
    2c64:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
    2c68:	8c 3f       	cpi	r24, 0xFC	; 252
    2c6a:	e1 f7       	brne	.-8      	; 0x2c64 <APP_changePassword+0x184>
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY){} /* wait the user to hit enter "ON/C" */

		UART_sendByte(MSG_checkPassword);  /* Telling MCU2 that MCU1 want to check if the password match the one in the EEPROM */

		for(uint8 j = 0 ; j < PASSWORD_SIZE	; j++) /* send the claimed password */
    2c6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c6e:	8f 5f       	subi	r24, 0xFF	; 255
    2c70:	8b a7       	std	Y+43, r24	; 0x2b
    2c72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c74:	85 30       	cpi	r24, 0x05	; 5
    2c76:	68 f3       	brcs	.-38     	; 0x2c52 <APP_changePassword+0x172>
		{
			UART_sendByte(Password2[j]);
			while(UART_receiveByte() != MC_Ready);
		}
		PasswrodsCompare = UART_receiveByte(); /* get MCU2 message to see if they are match or not */
    2c78:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
    2c7c:	80 93 76 01 	sts	0x0176, r24
		LCD_clearScreen();
    2c80:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		if(PasswrodsCompare == MSG_Matched) /* in case they are match change the password */
    2c84:	80 91 76 01 	lds	r24, 0x0176
    2c88:	80 3f       	cpi	r24, 0xF0	; 240
    2c8a:	09 f0       	breq	.+2      	; 0x2c8e <APP_changePassword+0x1ae>
    2c8c:	7c c0       	rjmp	.+248    	; 0x2d86 <APP_changePassword+0x2a6>
		{
			LCD_displayStringRowColumn(0, 4, "Matched");
    2c8e:	2b eb       	ldi	r18, 0xBB	; 187
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	64 e0       	ldi	r22, 0x04	; 4
    2c96:	a9 01       	movw	r20, r18
    2c98:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	aa e7       	ldi	r26, 0x7A	; 122
    2ca2:	b4 e4       	ldi	r27, 0x44	; 68
    2ca4:	89 8f       	std	Y+25, r24	; 0x19
    2ca6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca8:	ab 8f       	std	Y+27, r26	; 0x1b
    2caa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cac:	69 8d       	ldd	r22, Y+25	; 0x19
    2cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	4a ef       	ldi	r20, 0xFA	; 250
    2cba:	54 e4       	ldi	r21, 0x44	; 68
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8d 8b       	std	Y+21, r24	; 0x15
    2cc6:	9e 8b       	std	Y+22, r25	; 0x16
    2cc8:	af 8b       	std	Y+23, r26	; 0x17
    2cca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cce:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e8       	ldi	r20, 0x80	; 128
    2cda:	5f e3       	ldi	r21, 0x3F	; 63
    2cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce0:	88 23       	and	r24, r24
    2ce2:	2c f4       	brge	.+10     	; 0x2cee <APP_changePassword+0x20e>
		__ticks = 1;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	9c 8b       	std	Y+20, r25	; 0x14
    2cea:	8b 8b       	std	Y+19, r24	; 0x13
    2cec:	3f c0       	rjmp	.+126    	; 0x2d6c <APP_changePassword+0x28c>
	else if (__tmp > 65535)
    2cee:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	3f ef       	ldi	r19, 0xFF	; 255
    2cfa:	4f e7       	ldi	r20, 0x7F	; 127
    2cfc:	57 e4       	ldi	r21, 0x47	; 71
    2cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d02:	18 16       	cp	r1, r24
    2d04:	4c f5       	brge	.+82     	; 0x2d58 <APP_changePassword+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d06:	69 8d       	ldd	r22, Y+25	; 0x19
    2d08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9c 8b       	std	Y+20, r25	; 0x14
    2d2c:	8b 8b       	std	Y+19, r24	; 0x13
    2d2e:	0f c0       	rjmp	.+30     	; 0x2d4e <APP_changePassword+0x26e>
    2d30:	88 ec       	ldi	r24, 0xC8	; 200
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9a 8b       	std	Y+18, r25	; 0x12
    2d36:	89 8b       	std	Y+17, r24	; 0x11
    2d38:	89 89       	ldd	r24, Y+17	; 0x11
    2d3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <APP_changePassword+0x25c>
    2d40:	9a 8b       	std	Y+18, r25	; 0x12
    2d42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d44:	8b 89       	ldd	r24, Y+19	; 0x13
    2d46:	9c 89       	ldd	r25, Y+20	; 0x14
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	9c 8b       	std	Y+20, r25	; 0x14
    2d4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d50:	9c 89       	ldd	r25, Y+20	; 0x14
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	69 f7       	brne	.-38     	; 0x2d30 <APP_changePassword+0x250>
    2d56:	14 c0       	rjmp	.+40     	; 0x2d80 <APP_changePassword+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d58:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9c 8b       	std	Y+20, r25	; 0x14
    2d6a:	8b 8b       	std	Y+19, r24	; 0x13
    2d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d70:	98 8b       	std	Y+16, r25	; 0x10
    2d72:	8f 87       	std	Y+15, r24	; 0x0f
    2d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d76:	98 89       	ldd	r25, Y+16	; 0x10
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <APP_changePassword+0x298>
    2d7c:	98 8b       	std	Y+16, r25	; 0x10
    2d7e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			APP_setPassword(); /* go to set password function */
    2d80:	0e 94 ef 11 	call	0x23de	; 0x23de <APP_setPassword>
    2d84:	90 c0       	rjmp	.+288    	; 0x2ea6 <APP_changePassword+0x3c6>
			break;
		}
		else
		{
			Lives--; /* decrease number of tries by 1 if the user missed */
    2d86:	80 91 5e 01 	lds	r24, 0x015E
    2d8a:	81 50       	subi	r24, 0x01	; 1
    2d8c:	80 93 5e 01 	sts	0x015E, r24
			LCD_displayStringRowColumn(0, 3, "UnMatched");
    2d90:	24 ed       	ldi	r18, 0xD4	; 212
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	63 e0       	ldi	r22, 0x03	; 3
    2d98:	a9 01       	movw	r20, r18
    2d9a:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Tries left = ");
    2d9e:	27 ef       	ldi	r18, 0xF7	; 247
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	a9 01       	movw	r20, r18
    2da8:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			LCD_intgerToString(Lives);
    2dac:	80 91 5e 01 	lds	r24, 0x015E
    2db0:	88 2f       	mov	r24, r24
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_intgerToString>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	aa e7       	ldi	r26, 0x7A	; 122
    2dbe:	b4 e4       	ldi	r27, 0x44	; 68
    2dc0:	8b 87       	std	Y+11, r24	; 0x0b
    2dc2:	9c 87       	std	Y+12, r25	; 0x0c
    2dc4:	ad 87       	std	Y+13, r26	; 0x0d
    2dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a ef       	ldi	r20, 0xFA	; 250
    2dd6:	54 e4       	ldi	r21, 0x44	; 68
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8f 83       	std	Y+7, r24	; 0x07
    2de2:	98 87       	std	Y+8, r25	; 0x08
    2de4:	a9 87       	std	Y+9, r26	; 0x09
    2de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e8       	ldi	r20, 0x80	; 128
    2df6:	5f e3       	ldi	r21, 0x3F	; 63
    2df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dfc:	88 23       	and	r24, r24
    2dfe:	2c f4       	brge	.+10     	; 0x2e0a <APP_changePassword+0x32a>
		__ticks = 1;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	3f c0       	rjmp	.+126    	; 0x2e88 <APP_changePassword+0x3a8>
	else if (__tmp > 65535)
    2e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0c:	78 85       	ldd	r23, Y+8	; 0x08
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	4c f5       	brge	.+82     	; 0x2e74 <APP_changePassword+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e2       	ldi	r20, 0x20	; 32
    2e30:	51 e4       	ldi	r21, 0x41	; 65
    2e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	0f c0       	rjmp	.+30     	; 0x2e6a <APP_changePassword+0x38a>
    2e4c:	88 ec       	ldi	r24, 0xC8	; 200
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	9c 83       	std	Y+4, r25	; 0x04
    2e52:	8b 83       	std	Y+3, r24	; 0x03
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <APP_changePassword+0x378>
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	69 f7       	brne	.-38     	; 0x2e4c <APP_changePassword+0x36c>
    2e72:	14 c0       	rjmp	.+40     	; 0x2e9c <APP_changePassword+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <APP_changePassword+0x3b4>
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}while((Lives > 0)); /* wait until the user uses all number of tries available */
    2e9c:	80 91 5e 01 	lds	r24, 0x015E
    2ea0:	88 23       	and	r24, r24
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <APP_changePassword+0x3c6>
    2ea4:	2a ce       	rjmp	.-940    	; 0x2afa <APP_changePassword+0x1a>
	if(PasswrodsCompare == MSG_UnMatched) /* if the user used didn't get the password right in all of his tries */
    2ea6:	80 91 76 01 	lds	r24, 0x0176
    2eaa:	8f 30       	cpi	r24, 0x0F	; 15
    2eac:	e1 f4       	brne	.+56     	; 0x2ee6 <APP_changePassword+0x406>
	{
		LCD_clearScreen();
    2eae:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 3, "ERROR !!!");
    2eb2:	25 e0       	ldi	r18, 0x05	; 5
    2eb4:	31 e0       	ldi	r19, 0x01	; 1
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	63 e0       	ldi	r22, 0x03	; 3
    2eba:	a9 01       	movw	r20, r18
    2ebc:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		UART_sendByte(MSG_TurnOnAlarm); /* Telling MCU2 to turn on the buzzer */
    2ec0:	88 e8       	ldi	r24, 0x88	; 136
    2ec2:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
		g_ticks = 0;
    2ec6:	10 92 67 01 	sts	0x0167, r1
		g_exitAlarmFlag = 0;
    2eca:	10 92 6a 01 	sts	0x016A, r1
		TIMER1_init(&TIMER1_Configuration); /* setting the time to display ERROR message on LCD for 60 seconds */
    2ece:	88 e5       	ldi	r24, 0x58	; 88
    2ed0:	91 e0       	ldi	r25, 0x01	; 1
    2ed2:	0e 94 83 07 	call	0xf06	; 0xf06 <TIMER1_init>
		TIMER1_COMP_setCallBack(TIMER1_ALARM_ISR);
    2ed6:	8d e8       	ldi	r24, 0x8D	; 141
    2ed8:	99 e1       	ldi	r25, 0x19	; 25
    2eda:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <TIMER1_COMP_setCallBack>
		while(g_exitAlarmFlag == 0){} /* wait until the timer count the required time and handle different cases then exit */
    2ede:	80 91 6a 01 	lds	r24, 0x016A
    2ee2:	88 23       	and	r24, r24
    2ee4:	e1 f3       	breq	.-8      	; 0x2ede <APP_changePassword+0x3fe>
	}

}
    2ee6:	ad 96       	adiw	r28, 0x2d	; 45
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <APP_doorProcessing>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void APP_doorProcessing()
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	6f 97       	sbiw	r28, 0x1f	; 31
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
	Lives = ALLOWED_TRIES; /* Number of Tries Allowed */
    2f0c:	83 e0       	ldi	r24, 0x03	; 3
    2f0e:	80 93 5e 01 	sts	0x015E, r24
	do
	{
		PasswordMatchFlag = TRUE;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	80 93 70 01 	sts	0x0170, r24
		LCD_clearScreen();
    2f18:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Plz Enter the");
    2f1c:	2f e0       	ldi	r18, 0x0F	; 15
    2f1e:	31 e0       	ldi	r19, 0x01	; 1
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	a9 01       	movw	r20, r18
    2f26:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Password: ");
    2f2a:	2c ee       	ldi	r18, 0xEC	; 236
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	a9 01       	movw	r20, r18
    2f34:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++) /* Getting the password from the user */
    2f38:	1f 8e       	std	Y+31, r1	; 0x1f
    2f3a:	8a c0       	rjmp	.+276    	; 0x3050 <APP_doorProcessing+0x158>
		{
			uint8 key = KEYPAD_getPressedKey();
    2f3c:	0e 94 b8 10 	call	0x2170	; 0x2170 <KEYPAD_getPressedKey>
    2f40:	8e 8f       	std	Y+30, r24	; 0x1e
			if(key <= 9 && key >= 0)
    2f42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f44:	8a 30       	cpi	r24, 0x0A	; 10
    2f46:	60 f4       	brcc	.+24     	; 0x2f60 <APP_doorProcessing+0x68>
			{
				Password2[i] = key;
    2f48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f4a:	88 2f       	mov	r24, r24
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	fc 01       	movw	r30, r24
    2f50:	e5 59       	subi	r30, 0x95	; 149
    2f52:	fe 4f       	sbci	r31, 0xFE	; 254
    2f54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f56:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    2f58:	8a e2       	ldi	r24, 0x2A	; 42
    2f5a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
    2f5e:	03 c0       	rjmp	.+6      	; 0x2f66 <APP_doorProcessing+0x6e>
			}
			else /* in case the user pressed a key that is not allowed */
			{
				i--; /* don't count this key and go back again */
    2f60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f62:	81 50       	subi	r24, 0x01	; 1
    2f64:	8f 8f       	std	Y+31, r24	; 0x1f
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	aa ef       	ldi	r26, 0xFA	; 250
    2f6c:	b3 e4       	ldi	r27, 0x43	; 67
    2f6e:	89 8f       	std	Y+25, r24	; 0x19
    2f70:	9a 8f       	std	Y+26, r25	; 0x1a
    2f72:	ab 8f       	std	Y+27, r26	; 0x1b
    2f74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f76:	69 8d       	ldd	r22, Y+25	; 0x19
    2f78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	4a ef       	ldi	r20, 0xFA	; 250
    2f84:	54 e4       	ldi	r21, 0x44	; 68
    2f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	8d 8b       	std	Y+21, r24	; 0x15
    2f90:	9e 8b       	std	Y+22, r25	; 0x16
    2f92:	af 8b       	std	Y+23, r26	; 0x17
    2f94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f96:	6d 89       	ldd	r22, Y+21	; 0x15
    2f98:	7e 89       	ldd	r23, Y+22	; 0x16
    2f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e8       	ldi	r20, 0x80	; 128
    2fa4:	5f e3       	ldi	r21, 0x3F	; 63
    2fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2faa:	88 23       	and	r24, r24
    2fac:	2c f4       	brge	.+10     	; 0x2fb8 <APP_doorProcessing+0xc0>
		__ticks = 1;
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9c 8b       	std	Y+20, r25	; 0x14
    2fb4:	8b 8b       	std	Y+19, r24	; 0x13
    2fb6:	3f c0       	rjmp	.+126    	; 0x3036 <APP_doorProcessing+0x13e>
	else if (__tmp > 65535)
    2fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fba:	7e 89       	ldd	r23, Y+22	; 0x16
    2fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	3f ef       	ldi	r19, 0xFF	; 255
    2fc4:	4f e7       	ldi	r20, 0x7F	; 127
    2fc6:	57 e4       	ldi	r21, 0x47	; 71
    2fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fcc:	18 16       	cp	r1, r24
    2fce:	4c f5       	brge	.+82     	; 0x3022 <APP_doorProcessing+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd0:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	40 e2       	ldi	r20, 0x20	; 32
    2fde:	51 e4       	ldi	r21, 0x41	; 65
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	bc 01       	movw	r22, r24
    2fea:	cd 01       	movw	r24, r26
    2fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	9c 8b       	std	Y+20, r25	; 0x14
    2ff6:	8b 8b       	std	Y+19, r24	; 0x13
    2ff8:	0f c0       	rjmp	.+30     	; 0x3018 <APP_doorProcessing+0x120>
    2ffa:	88 ec       	ldi	r24, 0xC8	; 200
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	9a 8b       	std	Y+18, r25	; 0x12
    3000:	89 8b       	std	Y+17, r24	; 0x11
    3002:	89 89       	ldd	r24, Y+17	; 0x11
    3004:	9a 89       	ldd	r25, Y+18	; 0x12
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <APP_doorProcessing+0x10e>
    300a:	9a 8b       	std	Y+18, r25	; 0x12
    300c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300e:	8b 89       	ldd	r24, Y+19	; 0x13
    3010:	9c 89       	ldd	r25, Y+20	; 0x14
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	9c 8b       	std	Y+20, r25	; 0x14
    3016:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3018:	8b 89       	ldd	r24, Y+19	; 0x13
    301a:	9c 89       	ldd	r25, Y+20	; 0x14
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	69 f7       	brne	.-38     	; 0x2ffa <APP_doorProcessing+0x102>
    3020:	14 c0       	rjmp	.+40     	; 0x304a <APP_doorProcessing+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3022:	6d 89       	ldd	r22, Y+21	; 0x15
    3024:	7e 89       	ldd	r23, Y+22	; 0x16
    3026:	8f 89       	ldd	r24, Y+23	; 0x17
    3028:	98 8d       	ldd	r25, Y+24	; 0x18
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	9c 8b       	std	Y+20, r25	; 0x14
    3034:	8b 8b       	std	Y+19, r24	; 0x13
    3036:	8b 89       	ldd	r24, Y+19	; 0x13
    3038:	9c 89       	ldd	r25, Y+20	; 0x14
    303a:	98 8b       	std	Y+16, r25	; 0x10
    303c:	8f 87       	std	Y+15, r24	; 0x0f
    303e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3040:	98 89       	ldd	r25, Y+16	; 0x10
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <APP_doorProcessing+0x14a>
    3046:	98 8b       	std	Y+16, r25	; 0x10
    3048:	8f 87       	std	Y+15, r24	; 0x0f
	{
		PasswordMatchFlag = TRUE;
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Plz Enter the");
		LCD_displayStringRowColumn(1, 0, "Password: ");
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++) /* Getting the password from the user */
    304a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    304c:	8f 5f       	subi	r24, 0xFF	; 255
    304e:	8f 8f       	std	Y+31, r24	; 0x1f
    3050:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3052:	85 30       	cpi	r24, 0x05	; 5
    3054:	08 f4       	brcc	.+2      	; 0x3058 <APP_doorProcessing+0x160>
    3056:	72 cf       	rjmp	.-284    	; 0x2f3c <APP_doorProcessing+0x44>
			{
				i--; /* don't count this key and go back again */
			}
			_delay_ms(KEYPAD_BUTTON_DELAY); /* wait for certain time before pressing another button */
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY){} /* wait the user to hit enter "ON/C" */
    3058:	0e 94 b8 10 	call	0x2170	; 0x2170 <KEYPAD_getPressedKey>
    305c:	8d 30       	cpi	r24, 0x0D	; 13
    305e:	e1 f7       	brne	.-8      	; 0x3058 <APP_doorProcessing+0x160>

		UART_sendByte(MSG_checkPassword); /* Telling MCU2 that MCU1 want to check if the password match the one in the EEPROM */
    3060:	87 e7       	ldi	r24, 0x77	; 119
    3062:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>

		for(uint8 j = 0 ; j < PASSWORD_SIZE	; j++) /* send the claimed password */
    3066:	1d 8e       	std	Y+29, r1	; 0x1d
    3068:	10 c0       	rjmp	.+32     	; 0x308a <APP_doorProcessing+0x192>
		{
			UART_sendByte(Password2[j]);
    306a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    306c:	88 2f       	mov	r24, r24
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	fc 01       	movw	r30, r24
    3072:	e5 59       	subi	r30, 0x95	; 149
    3074:	fe 4f       	sbci	r31, 0xFE	; 254
    3076:	80 81       	ld	r24, Z
    3078:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
			while(UART_receiveByte() != MC_Ready);
    307c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
    3080:	8c 3f       	cpi	r24, 0xFC	; 252
    3082:	e1 f7       	brne	.-8      	; 0x307c <APP_doorProcessing+0x184>
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY){} /* wait the user to hit enter "ON/C" */

		UART_sendByte(MSG_checkPassword); /* Telling MCU2 that MCU1 want to check if the password match the one in the EEPROM */

		for(uint8 j = 0 ; j < PASSWORD_SIZE	; j++) /* send the claimed password */
    3084:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3086:	8f 5f       	subi	r24, 0xFF	; 255
    3088:	8d 8f       	std	Y+29, r24	; 0x1d
    308a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    308c:	85 30       	cpi	r24, 0x05	; 5
    308e:	68 f3       	brcs	.-38     	; 0x306a <APP_doorProcessing+0x172>
		{
			UART_sendByte(Password2[j]);
			while(UART_receiveByte() != MC_Ready);
		}
		PasswrodsCompare = UART_receiveByte(); /* get MCU2 message to see if they are match or not */
    3090:	0e 94 8e 06 	call	0xd1c	; 0xd1c <UART_receiveByte>
    3094:	80 93 76 01 	sts	0x0176, r24
		LCD_clearScreen();
    3098:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		if(PasswrodsCompare == MSG_Matched) /* in case they are match open the door */
    309c:	80 91 76 01 	lds	r24, 0x0176
    30a0:	80 3f       	cpi	r24, 0xF0	; 240
    30a2:	11 f5       	brne	.+68     	; 0x30e8 <APP_doorProcessing+0x1f0>
		{
			UART_sendByte(MSG_Motor);
    30a4:	80 e2       	ldi	r24, 0x20	; 32
    30a6:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
			g_ticks = 0;
    30aa:	10 92 67 01 	sts	0x0167, r1
			TIMER1_COMP_setCallBack(TIMER1_MOTOR_15SEC_ISR); /* unlock the door takes 15 seconds */
    30ae:	8d e2       	ldi	r24, 0x2D	; 45
    30b0:	99 e1       	ldi	r25, 0x19	; 25
    30b2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <TIMER1_COMP_setCallBack>
			TIMER1_init(&TIMER1_Configuration);
    30b6:	88 e5       	ldi	r24, 0x58	; 88
    30b8:	91 e0       	ldi	r25, 0x01	; 1
    30ba:	0e 94 83 07 	call	0xf06	; 0xf06 <TIMER1_init>
			LCD_displayStringRowColumn(0, 3, "Unlocking");
    30be:	2d e1       	ldi	r18, 0x1D	; 29
    30c0:	31 e0       	ldi	r19, 0x01	; 1
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	63 e0       	ldi	r22, 0x03	; 3
    30c6:	a9 01       	movw	r20, r18
    30c8:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 3, "The Door");
    30cc:	27 e2       	ldi	r18, 0x27	; 39
    30ce:	31 e0       	ldi	r19, 0x01	; 1
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	a9 01       	movw	r20, r18
    30d6:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			g_exitMotorFlag = 0;
    30da:	10 92 68 01 	sts	0x0168, r1
			while(g_exitMotorFlag == 0){} /* wait until the timer count the required time and handle different cases then exit */
    30de:	80 91 68 01 	lds	r24, 0x0168
    30e2:	88 23       	and	r24, r24
    30e4:	e1 f3       	breq	.-8      	; 0x30de <APP_doorProcessing+0x1e6>
    30e6:	90 c0       	rjmp	.+288    	; 0x3208 <APP_doorProcessing+0x310>
			break; /* Go out from the do while loop with PasswrodsCompare = MSG_Matched to avoid ERROR state */
		}
		else
		{
			Lives--; /* decrease number of tries by 1 if the user missed */
    30e8:	80 91 5e 01 	lds	r24, 0x015E
    30ec:	81 50       	subi	r24, 0x01	; 1
    30ee:	80 93 5e 01 	sts	0x015E, r24
			LCD_displayStringRowColumn(0, 3, "UnMatched");
    30f2:	24 ed       	ldi	r18, 0xD4	; 212
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	63 e0       	ldi	r22, 0x03	; 3
    30fa:	a9 01       	movw	r20, r18
    30fc:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Tries left = ");
    3100:	27 ef       	ldi	r18, 0xF7	; 247
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	60 e0       	ldi	r22, 0x00	; 0
    3108:	a9 01       	movw	r20, r18
    310a:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			LCD_intgerToString(Lives);
    310e:	80 91 5e 01 	lds	r24, 0x015E
    3112:	88 2f       	mov	r24, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_intgerToString>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	aa e7       	ldi	r26, 0x7A	; 122
    3120:	b4 e4       	ldi	r27, 0x44	; 68
    3122:	8b 87       	std	Y+11, r24	; 0x0b
    3124:	9c 87       	std	Y+12, r25	; 0x0c
    3126:	ad 87       	std	Y+13, r26	; 0x0d
    3128:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312a:	6b 85       	ldd	r22, Y+11	; 0x0b
    312c:	7c 85       	ldd	r23, Y+12	; 0x0c
    312e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3130:	9e 85       	ldd	r25, Y+14	; 0x0e
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	4a ef       	ldi	r20, 0xFA	; 250
    3138:	54 e4       	ldi	r21, 0x44	; 68
    313a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	8f 83       	std	Y+7, r24	; 0x07
    3144:	98 87       	std	Y+8, r25	; 0x08
    3146:	a9 87       	std	Y+9, r26	; 0x09
    3148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    314a:	6f 81       	ldd	r22, Y+7	; 0x07
    314c:	78 85       	ldd	r23, Y+8	; 0x08
    314e:	89 85       	ldd	r24, Y+9	; 0x09
    3150:	9a 85       	ldd	r25, Y+10	; 0x0a
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e8       	ldi	r20, 0x80	; 128
    3158:	5f e3       	ldi	r21, 0x3F	; 63
    315a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    315e:	88 23       	and	r24, r24
    3160:	2c f4       	brge	.+10     	; 0x316c <APP_doorProcessing+0x274>
		__ticks = 1;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	9e 83       	std	Y+6, r25	; 0x06
    3168:	8d 83       	std	Y+5, r24	; 0x05
    316a:	3f c0       	rjmp	.+126    	; 0x31ea <APP_doorProcessing+0x2f2>
	else if (__tmp > 65535)
    316c:	6f 81       	ldd	r22, Y+7	; 0x07
    316e:	78 85       	ldd	r23, Y+8	; 0x08
    3170:	89 85       	ldd	r24, Y+9	; 0x09
    3172:	9a 85       	ldd	r25, Y+10	; 0x0a
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	3f ef       	ldi	r19, 0xFF	; 255
    3178:	4f e7       	ldi	r20, 0x7F	; 127
    317a:	57 e4       	ldi	r21, 0x47	; 71
    317c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3180:	18 16       	cp	r1, r24
    3182:	4c f5       	brge	.+82     	; 0x31d6 <APP_doorProcessing+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3184:	6b 85       	ldd	r22, Y+11	; 0x0b
    3186:	7c 85       	ldd	r23, Y+12	; 0x0c
    3188:	8d 85       	ldd	r24, Y+13	; 0x0d
    318a:	9e 85       	ldd	r25, Y+14	; 0x0e
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e2       	ldi	r20, 0x20	; 32
    3192:	51 e4       	ldi	r21, 0x41	; 65
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	bc 01       	movw	r22, r24
    319e:	cd 01       	movw	r24, r26
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	9e 83       	std	Y+6, r25	; 0x06
    31aa:	8d 83       	std	Y+5, r24	; 0x05
    31ac:	0f c0       	rjmp	.+30     	; 0x31cc <APP_doorProcessing+0x2d4>
    31ae:	88 ec       	ldi	r24, 0xC8	; 200
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	9c 83       	std	Y+4, r25	; 0x04
    31b4:	8b 83       	std	Y+3, r24	; 0x03
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <APP_doorProcessing+0x2c2>
    31be:	9c 83       	std	Y+4, r25	; 0x04
    31c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c2:	8d 81       	ldd	r24, Y+5	; 0x05
    31c4:	9e 81       	ldd	r25, Y+6	; 0x06
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	9e 83       	std	Y+6, r25	; 0x06
    31ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31cc:	8d 81       	ldd	r24, Y+5	; 0x05
    31ce:	9e 81       	ldd	r25, Y+6	; 0x06
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	69 f7       	brne	.-38     	; 0x31ae <APP_doorProcessing+0x2b6>
    31d4:	14 c0       	rjmp	.+40     	; 0x31fe <APP_doorProcessing+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9e 83       	std	Y+6, r25	; 0x06
    31e8:	8d 83       	std	Y+5, r24	; 0x05
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	9e 81       	ldd	r25, Y+6	; 0x06
    31ee:	9a 83       	std	Y+2, r25	; 0x02
    31f0:	89 83       	std	Y+1, r24	; 0x01
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	9a 81       	ldd	r25, Y+2	; 0x02
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <APP_doorProcessing+0x2fe>
    31fa:	9a 83       	std	Y+2, r25	; 0x02
    31fc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}while((Lives > 0)); /* wait until the user uses all number of tries available */
    31fe:	80 91 5e 01 	lds	r24, 0x015E
    3202:	88 23       	and	r24, r24
    3204:	09 f0       	breq	.+2      	; 0x3208 <APP_doorProcessing+0x310>
    3206:	85 ce       	rjmp	.-758    	; 0x2f12 <APP_doorProcessing+0x1a>
	if(PasswrodsCompare == MSG_UnMatched) /* if the user used didn't get the password right in all of his tries */
    3208:	80 91 76 01 	lds	r24, 0x0176
    320c:	8f 30       	cpi	r24, 0x0F	; 15
    320e:	e1 f4       	brne	.+56     	; 0x3248 <APP_doorProcessing+0x350>
	{
		LCD_clearScreen();
    3210:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 3, "ERROR !!!");
    3214:	25 e0       	ldi	r18, 0x05	; 5
    3216:	31 e0       	ldi	r19, 0x01	; 1
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	63 e0       	ldi	r22, 0x03	; 3
    321c:	a9 01       	movw	r20, r18
    321e:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		UART_sendByte(MSG_TurnOnAlarm); /* Telling MCU2 to turn on the buzzer */
    3222:	88 e8       	ldi	r24, 0x88	; 136
    3224:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
		g_ticks = 0;
    3228:	10 92 67 01 	sts	0x0167, r1
		g_exitAlarmFlag = 0;
    322c:	10 92 6a 01 	sts	0x016A, r1
		TIMER1_init(&TIMER1_Configuration); /* setting the time to display ERROR message on LCD for 60 seconds */
    3230:	88 e5       	ldi	r24, 0x58	; 88
    3232:	91 e0       	ldi	r25, 0x01	; 1
    3234:	0e 94 83 07 	call	0xf06	; 0xf06 <TIMER1_init>
		TIMER1_COMP_setCallBack(TIMER1_ALARM_ISR);
    3238:	8d e8       	ldi	r24, 0x8D	; 141
    323a:	99 e1       	ldi	r25, 0x19	; 25
    323c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <TIMER1_COMP_setCallBack>
		while(g_exitAlarmFlag == 0){} /* wait until the timer count the required time and handle different cases then exit */
    3240:	80 91 6a 01 	lds	r24, 0x016A
    3244:	88 23       	and	r24, r24
    3246:	e1 f3       	breq	.-8      	; 0x3240 <APP_doorProcessing+0x348>
	}

}
    3248:	6f 96       	adiw	r28, 0x1f	; 31
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <TIMER1_MOTOR_15SEC_ISR>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void TIMER1_MOTOR_15SEC_ISR(void)
{
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    3262:	80 91 67 01 	lds	r24, 0x0167
    3266:	8f 5f       	subi	r24, 0xFF	; 255
    3268:	80 93 67 01 	sts	0x0167, r24
	if(g_ticks == 15) /* wait until number of seconds = 15 */
    326c:	80 91 67 01 	lds	r24, 0x0167
    3270:	8f 30       	cpi	r24, 0x0F	; 15
    3272:	39 f5       	brne	.+78     	; 0x32c2 <TIMER1_MOTOR_15SEC_ISR+0x68>
	{
		g_ticks = 0; /* clear the number of seconds so we can use it in other functions*/
    3274:	10 92 67 01 	sts	0x0167, r1
		LCD_clearScreen();
    3278:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		if(g_MotorUnlocking == 0) /* in case it is the first time to come here then we want to unlock the door */
    327c:	80 91 69 01 	lds	r24, 0x0169
    3280:	88 23       	and	r24, r24
    3282:	a1 f4       	brne	.+40     	; 0x32ac <TIMER1_MOTOR_15SEC_ISR+0x52>
		{
			LCD_displayStringRowColumn(0, 0, "Door Is Locked");
    3284:	20 e3       	ldi	r18, 0x30	; 48
    3286:	31 e0       	ldi	r19, 0x01	; 1
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	a9 01       	movw	r20, r18
    328e:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			/* Waiting MC1 to be Ready as LCD is slow at writing and Turning Motor On or OFF is fast so there will
			 * a delay that we can solve by waiting LCD to write then turn the motor on or off */
			UART_sendByte(MC_Ready);
    3292:	8c ef       	ldi	r24, 0xFC	; 252
    3294:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
			g_MotorUnlocking++; /* go to the other branch next time */
    3298:	80 91 69 01 	lds	r24, 0x0169
    329c:	8f 5f       	subi	r24, 0xFF	; 255
    329e:	80 93 69 01 	sts	0x0169, r24
			TIMER1_COMP_setCallBack(TIMER1_MOTOR_3SEC_ISR); /* to wait another 3 seconds then lock the door again */
    32a2:	84 e6       	ldi	r24, 0x64	; 100
    32a4:	99 e1       	ldi	r25, 0x19	; 25
    32a6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <TIMER1_COMP_setCallBack>
    32aa:	0b c0       	rjmp	.+22     	; 0x32c2 <TIMER1_MOTOR_15SEC_ISR+0x68>
		}
		else if(g_MotorUnlocking == 1) /* in case it is the second time to come here then we handled every case for the door and we want to exit*/
    32ac:	80 91 69 01 	lds	r24, 0x0169
    32b0:	81 30       	cpi	r24, 0x01	; 1
    32b2:	39 f4       	brne	.+14     	; 0x32c2 <TIMER1_MOTOR_15SEC_ISR+0x68>
		{
			g_MotorUnlocking = 0;
    32b4:	10 92 69 01 	sts	0x0169, r1
			g_exitMotorFlag = 1; /* to exit the function */
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	80 93 68 01 	sts	0x0168, r24
			TIMER1_deInit(); /* stop the timer */
    32be:	0e 94 c7 07 	call	0xf8e	; 0xf8e <TIMER1_deInit>
		}
	}
}
    32c2:	cf 91       	pop	r28
    32c4:	df 91       	pop	r29
    32c6:	08 95       	ret

000032c8 <TIMER1_MOTOR_3SEC_ISR>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void TIMER1_MOTOR_3SEC_ISR(void)
{
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    32d0:	80 91 67 01 	lds	r24, 0x0167
    32d4:	8f 5f       	subi	r24, 0xFF	; 255
    32d6:	80 93 67 01 	sts	0x0167, r24
	if(g_ticks == 3) /* wait until number of seconds = 3 */
    32da:	80 91 67 01 	lds	r24, 0x0167
    32de:	83 30       	cpi	r24, 0x03	; 3
    32e0:	c9 f4       	brne	.+50     	; 0x3314 <TIMER1_MOTOR_3SEC_ISR+0x4c>
	{
		g_ticks = 0; /* clear the number of seconds */
    32e2:	10 92 67 01 	sts	0x0167, r1
		LCD_clearScreen();
    32e6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 3, "Locking");
    32ea:	2f e3       	ldi	r18, 0x3F	; 63
    32ec:	31 e0       	ldi	r19, 0x01	; 1
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	63 e0       	ldi	r22, 0x03	; 3
    32f2:	a9 01       	movw	r20, r18
    32f4:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 3, "The Door");
    32f8:	27 e2       	ldi	r18, 0x27	; 39
    32fa:	31 e0       	ldi	r19, 0x01	; 1
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	63 e0       	ldi	r22, 0x03	; 3
    3300:	a9 01       	movw	r20, r18
    3302:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		/* Waiting MC1 to be Ready as LCD is slow at writing and Turning Motor On or OFF is fast so there will
		 * a delay that we can solve by waiting LCD to write then turn the motor on or off */
		UART_sendByte(MC_Ready);
    3306:	8c ef       	ldi	r24, 0xFC	; 252
    3308:	0e 94 77 06 	call	0xcee	; 0xcee <UART_sendByte>
		TIMER1_COMP_setCallBack(TIMER1_MOTOR_15SEC_ISR); /* so we can count another 15 seconds then stop the motor */
    330c:	8d e2       	ldi	r24, 0x2D	; 45
    330e:	99 e1       	ldi	r25, 0x19	; 25
    3310:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <TIMER1_COMP_setCallBack>
	}
}
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <TIMER1_ALARM_ISR>:
* Parameters (in):    	None
* Parameters (out):   	None
* Return value:      	void
********************************************************************************/
void TIMER1_ALARM_ISR()
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    3322:	80 91 67 01 	lds	r24, 0x0167
    3326:	8f 5f       	subi	r24, 0xFF	; 255
    3328:	80 93 67 01 	sts	0x0167, r24
	if(g_ticks == 60) /* wait until number of seconds = 60 */
    332c:	80 91 67 01 	lds	r24, 0x0167
    3330:	8c 33       	cpi	r24, 0x3C	; 60
    3332:	39 f4       	brne	.+14     	; 0x3342 <TIMER1_ALARM_ISR+0x28>
	{
		g_ticks = 0;
    3334:	10 92 67 01 	sts	0x0167, r1
		g_exitAlarmFlag = 1; /* exit ERROR state */
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	80 93 6a 01 	sts	0x016A, r24
		TIMER1_deInit(); /* stop the timer */
    333e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <TIMER1_deInit>
	}
}
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	08 95       	ret

00003348 <__udivmodsi4>:
    3348:	a1 e2       	ldi	r26, 0x21	; 33
    334a:	1a 2e       	mov	r1, r26
    334c:	aa 1b       	sub	r26, r26
    334e:	bb 1b       	sub	r27, r27
    3350:	fd 01       	movw	r30, r26
    3352:	0d c0       	rjmp	.+26     	; 0x336e <__udivmodsi4_ep>

00003354 <__udivmodsi4_loop>:
    3354:	aa 1f       	adc	r26, r26
    3356:	bb 1f       	adc	r27, r27
    3358:	ee 1f       	adc	r30, r30
    335a:	ff 1f       	adc	r31, r31
    335c:	a2 17       	cp	r26, r18
    335e:	b3 07       	cpc	r27, r19
    3360:	e4 07       	cpc	r30, r20
    3362:	f5 07       	cpc	r31, r21
    3364:	20 f0       	brcs	.+8      	; 0x336e <__udivmodsi4_ep>
    3366:	a2 1b       	sub	r26, r18
    3368:	b3 0b       	sbc	r27, r19
    336a:	e4 0b       	sbc	r30, r20
    336c:	f5 0b       	sbc	r31, r21

0000336e <__udivmodsi4_ep>:
    336e:	66 1f       	adc	r22, r22
    3370:	77 1f       	adc	r23, r23
    3372:	88 1f       	adc	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	1a 94       	dec	r1
    3378:	69 f7       	brne	.-38     	; 0x3354 <__udivmodsi4_loop>
    337a:	60 95       	com	r22
    337c:	70 95       	com	r23
    337e:	80 95       	com	r24
    3380:	90 95       	com	r25
    3382:	9b 01       	movw	r18, r22
    3384:	ac 01       	movw	r20, r24
    3386:	bd 01       	movw	r22, r26
    3388:	cf 01       	movw	r24, r30
    338a:	08 95       	ret

0000338c <__prologue_saves__>:
    338c:	2f 92       	push	r2
    338e:	3f 92       	push	r3
    3390:	4f 92       	push	r4
    3392:	5f 92       	push	r5
    3394:	6f 92       	push	r6
    3396:	7f 92       	push	r7
    3398:	8f 92       	push	r8
    339a:	9f 92       	push	r9
    339c:	af 92       	push	r10
    339e:	bf 92       	push	r11
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	ca 1b       	sub	r28, r26
    33b6:	db 0b       	sbc	r29, r27
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	09 94       	ijmp

000033c4 <__epilogue_restores__>:
    33c4:	2a 88       	ldd	r2, Y+18	; 0x12
    33c6:	39 88       	ldd	r3, Y+17	; 0x11
    33c8:	48 88       	ldd	r4, Y+16	; 0x10
    33ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    33cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    33ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    33d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    33d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    33d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    33d6:	b9 84       	ldd	r11, Y+9	; 0x09
    33d8:	c8 84       	ldd	r12, Y+8	; 0x08
    33da:	df 80       	ldd	r13, Y+7	; 0x07
    33dc:	ee 80       	ldd	r14, Y+6	; 0x06
    33de:	fd 80       	ldd	r15, Y+5	; 0x05
    33e0:	0c 81       	ldd	r16, Y+4	; 0x04
    33e2:	1b 81       	ldd	r17, Y+3	; 0x03
    33e4:	aa 81       	ldd	r26, Y+2	; 0x02
    33e6:	b9 81       	ldd	r27, Y+1	; 0x01
    33e8:	ce 0f       	add	r28, r30
    33ea:	d1 1d       	adc	r29, r1
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	cd bf       	out	0x3d, r28	; 61
    33f6:	ed 01       	movw	r28, r26
    33f8:	08 95       	ret

000033fa <itoa>:
    33fa:	fb 01       	movw	r30, r22
    33fc:	9f 01       	movw	r18, r30
    33fe:	e8 94       	clt
    3400:	42 30       	cpi	r20, 0x02	; 2
    3402:	c4 f0       	brlt	.+48     	; 0x3434 <itoa+0x3a>
    3404:	45 32       	cpi	r20, 0x25	; 37
    3406:	b4 f4       	brge	.+44     	; 0x3434 <itoa+0x3a>
    3408:	4a 30       	cpi	r20, 0x0A	; 10
    340a:	29 f4       	brne	.+10     	; 0x3416 <itoa+0x1c>
    340c:	97 fb       	bst	r25, 7
    340e:	1e f4       	brtc	.+6      	; 0x3416 <itoa+0x1c>
    3410:	90 95       	com	r25
    3412:	81 95       	neg	r24
    3414:	9f 4f       	sbci	r25, 0xFF	; 255
    3416:	64 2f       	mov	r22, r20
    3418:	77 27       	eor	r23, r23
    341a:	0e 94 2e 1a 	call	0x345c	; 0x345c <__udivmodhi4>
    341e:	80 5d       	subi	r24, 0xD0	; 208
    3420:	8a 33       	cpi	r24, 0x3A	; 58
    3422:	0c f0       	brlt	.+2      	; 0x3426 <itoa+0x2c>
    3424:	89 5d       	subi	r24, 0xD9	; 217
    3426:	81 93       	st	Z+, r24
    3428:	cb 01       	movw	r24, r22
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	a1 f7       	brne	.-24     	; 0x3416 <itoa+0x1c>
    342e:	16 f4       	brtc	.+4      	; 0x3434 <itoa+0x3a>
    3430:	5d e2       	ldi	r21, 0x2D	; 45
    3432:	51 93       	st	Z+, r21
    3434:	10 82       	st	Z, r1
    3436:	c9 01       	movw	r24, r18
    3438:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <strrev>

0000343c <strrev>:
    343c:	dc 01       	movw	r26, r24
    343e:	fc 01       	movw	r30, r24
    3440:	67 2f       	mov	r22, r23
    3442:	71 91       	ld	r23, Z+
    3444:	77 23       	and	r23, r23
    3446:	e1 f7       	brne	.-8      	; 0x3440 <strrev+0x4>
    3448:	32 97       	sbiw	r30, 0x02	; 2
    344a:	04 c0       	rjmp	.+8      	; 0x3454 <strrev+0x18>
    344c:	7c 91       	ld	r23, X
    344e:	6d 93       	st	X+, r22
    3450:	70 83       	st	Z, r23
    3452:	62 91       	ld	r22, -Z
    3454:	ae 17       	cp	r26, r30
    3456:	bf 07       	cpc	r27, r31
    3458:	c8 f3       	brcs	.-14     	; 0x344c <strrev+0x10>
    345a:	08 95       	ret

0000345c <__udivmodhi4>:
    345c:	aa 1b       	sub	r26, r26
    345e:	bb 1b       	sub	r27, r27
    3460:	51 e1       	ldi	r21, 0x11	; 17
    3462:	07 c0       	rjmp	.+14     	; 0x3472 <__udivmodhi4_ep>

00003464 <__udivmodhi4_loop>:
    3464:	aa 1f       	adc	r26, r26
    3466:	bb 1f       	adc	r27, r27
    3468:	a6 17       	cp	r26, r22
    346a:	b7 07       	cpc	r27, r23
    346c:	10 f0       	brcs	.+4      	; 0x3472 <__udivmodhi4_ep>
    346e:	a6 1b       	sub	r26, r22
    3470:	b7 0b       	sbc	r27, r23

00003472 <__udivmodhi4_ep>:
    3472:	88 1f       	adc	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	5a 95       	dec	r21
    3478:	a9 f7       	brne	.-22     	; 0x3464 <__udivmodhi4_loop>
    347a:	80 95       	com	r24
    347c:	90 95       	com	r25
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	08 95       	ret

00003484 <_exit>:
    3484:	f8 94       	cli

00003486 <__stop_program>:
    3486:	ff cf       	rjmp	.-2      	; 0x3486 <__stop_program>
